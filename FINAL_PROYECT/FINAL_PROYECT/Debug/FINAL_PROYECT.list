
FINAL_PROYECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001584  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007648  08007648  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007648  08007648  00017648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007650  08007650  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000080  080076d8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  080076d8  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014121  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002579  00000000  00000000  000341d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00036750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  000379b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c39  00000000  00000000  00038b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016101  00000000  00000000  00060751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5f10  00000000  00000000  00076852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c762  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005378  00000000  00000000  0016c7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060ac 	.word	0x080060ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080060ac 	.word	0x080060ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <microDelay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void microDelay (uint16_t delay)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <microDelay+0x30>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000e02:	bf00      	nop
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <microDelay+0x30>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d3f9      	bcc.n	8000e04 <microDelay+0x14>
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000f0 	.word	0x200000f0

08000e24 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f001 fa72 	bl	800233c <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f001 fc2e 	bl	80026c0 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000e64:	2014      	movs	r0, #20
 8000e66:	f001 f95f 	bl	8002128 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f001 fc25 	bl	80026c0 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000e76:	201e      	movs	r0, #30
 8000e78:	f7ff ffba 	bl	8000df0 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f001 fa56 	bl	800233c <HAL_GPIO_Init>
  microDelay (40);
 8000e90:	2028      	movs	r0, #40	; 0x28
 8000e92:	f7ff ffad 	bl	8000df0 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000e96:	2102      	movs	r1, #2
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9c:	f001 fbf8 	bl	8002690 <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10c      	bne.n	8000ec0 <DHT11_Start+0x9c>
  {
    microDelay (80);
 8000ea6:	2050      	movs	r0, #80	; 0x50
 8000ea8:	f7ff ffa2 	bl	8000df0 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000eac:	2102      	movs	r1, #2
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f001 fbed 	bl	8002690 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <DHT11_Start+0x9c>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000ec0:	f001 f926 	bl	8002110 <HAL_GetTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <DHT11_Start+0xe4>)
 8000ec8:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000eca:	f001 f921 	bl	8002110 <HAL_GetTick>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <DHT11_Start+0xe8>)
 8000ed2:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000ed4:	e004      	b.n	8000ee0 <DHT11_Start+0xbc>
  {
    cMillis = HAL_GetTick();
 8000ed6:	f001 f91b 	bl	8002110 <HAL_GetTick>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <DHT11_Start+0xe8>)
 8000ede:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f001 fbd3 	bl	8002690 <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <DHT11_Start+0xda>
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <DHT11_Start+0xe4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	1c9a      	adds	r2, r3, #2
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <DHT11_Start+0xe8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d8eb      	bhi.n	8000ed6 <DHT11_Start+0xb2>
  }
  return Response;
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200001c0 	.word	0x200001c0
 8000f0c:	200001e4 	.word	0x200001e4

08000f10 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	e066      	b.n	8000fea <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000f1c:	f001 f8f8 	bl	8002110 <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <DHT11_Read+0xec>)
 8000f24:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000f26:	f001 f8f3 	bl	8002110 <HAL_GetTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a34      	ldr	r2, [pc, #208]	; (8001000 <DHT11_Read+0xf0>)
 8000f2e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f30:	e004      	b.n	8000f3c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000f32:	f001 f8ed 	bl	8002110 <HAL_GetTick>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a31      	ldr	r2, [pc, #196]	; (8001000 <DHT11_Read+0xf0>)
 8000f3a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f001 fba5 	bl	8002690 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d106      	bne.n	8000f5a <DHT11_Read+0x4a>
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <DHT11_Read+0xec>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	1c9a      	adds	r2, r3, #2
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <DHT11_Read+0xf0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d8eb      	bhi.n	8000f32 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f7ff ff48 	bl	8000df0 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000f60:	2102      	movs	r1, #2
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f001 fb93 	bl	8002690 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10e      	bne.n	8000f8e <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2201      	movs	r2, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	b25a      	sxtb	r2, r3
 8000f82:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f86:	4013      	ands	r3, r2
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	71bb      	strb	r3, [r7, #6]
 8000f8c:	e00b      	b.n	8000fa6 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f1c3 0307 	rsb	r3, r3, #7
 8000f94:	2201      	movs	r2, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	b25a      	sxtb	r2, r3
 8000f9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000fa6:	f001 f8b3 	bl	8002110 <HAL_GetTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <DHT11_Read+0xec>)
 8000fae:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000fb0:	f001 f8ae 	bl	8002110 <HAL_GetTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <DHT11_Read+0xf0>)
 8000fb8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000fba:	e004      	b.n	8000fc6 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000fbc:	f001 f8a8 	bl	8002110 <HAL_GetTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <DHT11_Read+0xf0>)
 8000fc4:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f001 fb60 	bl	8002690 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <DHT11_Read+0xd4>
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <DHT11_Read+0xec>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	1c9a      	adds	r2, r3, #2
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <DHT11_Read+0xf0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8eb      	bhi.n	8000fbc <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	d995      	bls.n	8000f1c <DHT11_Read+0xc>
    }
  }
  return b;
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001c0 	.word	0x200001c0
 8001000:	200001e4 	.word	0x200001e4
 8001004:	00000000 	.word	0x00000000

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f001 f80d 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 fa03 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 fb17 	bl	800164c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800101e:	f000 fae5 	bl	80015ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001022:	f000 fa4f 	bl	80014c4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001026:	f000 fa8d 	bl	8001544 <MX_TIM1_Init>


  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800102a:	48c3      	ldr	r0, [pc, #780]	; (8001338 <main+0x330>)
 800102c:	f003 fbfa 	bl	8004824 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f001 fb41 	bl	80026c0 <HAL_GPIO_WritePin>
  SSD1306_Init();
 800103e:	f000 fb95 	bl	800176c <SSD1306_Init>
  SSD1306_GotoXY (26, 26);
 8001042:	211a      	movs	r1, #26
 8001044:	201a      	movs	r0, #26
 8001046:	f000 fcfb 	bl	8001a40 <SSD1306_GotoXY>
  SSD1306_Puts("Welcome", &Font_11x18, 1);
 800104a:	2201      	movs	r2, #1
 800104c:	49bb      	ldr	r1, [pc, #748]	; (800133c <main+0x334>)
 800104e:	48bc      	ldr	r0, [pc, #752]	; (8001340 <main+0x338>)
 8001050:	f000 fd8c 	bl	8001b6c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001054:	f000 fc4e 	bl	80018f4 <SSD1306_UpdateScreen>

  HAL_Delay(3000);
 8001058:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800105c:	f001 f864 	bl	8002128 <HAL_Delay>
  SSD1306_Clear();
 8001060:	f000 fda9 	bl	8001bb6 <SSD1306_Clear>

  SSD1306_GotoXY (0, 0);
 8001064:	2100      	movs	r1, #0
 8001066:	2000      	movs	r0, #0
 8001068:	f000 fcea 	bl	8001a40 <SSD1306_GotoXY>
  SSD1306_Puts ("Temperature:", &Font_11x18, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	49b3      	ldr	r1, [pc, #716]	; (800133c <main+0x334>)
 8001070:	48b4      	ldr	r0, [pc, #720]	; (8001344 <main+0x33c>)
 8001072:	f000 fd7b 	bl	8001b6c <SSD1306_Puts>
  SSD1306_GotoXY (0,33);
 8001076:	2121      	movs	r1, #33	; 0x21
 8001078:	2000      	movs	r0, #0
 800107a:	f000 fce1 	bl	8001a40 <SSD1306_GotoXY>
  SSD1306_Puts ("Distance:", &Font_11x18, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	49ae      	ldr	r1, [pc, #696]	; (800133c <main+0x334>)
 8001082:	48b1      	ldr	r0, [pc, #708]	; (8001348 <main+0x340>)
 8001084:	f000 fd72 	bl	8001b6c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001088:	f000 fc34 	bl	80018f4 <SSD1306_UpdateScreen>
  uint32_t current_tick;
  uint32_t last_tick=0;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  uint32_t current_tick2;
  uint32_t last_tick2=0;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  current_tick=HAL_GetTick();
 8001094:	f001 f83c 	bl	8002110 <HAL_GetTick>
 8001098:	60f8      	str	r0, [r7, #12]
	     if(DHT11_Start())
 800109a:	f7ff fec3 	bl	8000e24 <DHT11_Start>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80c7 	beq.w	8001234 <main+0x22c>
	  	 {
	  	  //if(DHT11_Start())
	  	  if(current_tick-last_tick>=1000)
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010b0:	f0c0 80c0 	bcc.w	8001234 <main+0x22c>
	  	  {
	  		  last_tick = current_tick;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	617b      	str	r3, [r7, #20]
	  		  RHS = DHT11_Read(); // Relative humidity integral
 80010b8:	f7ff ff2a 	bl	8000f10 <DHT11_Read>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4ba2      	ldr	r3, [pc, #648]	; (800134c <main+0x344>)
 80010c2:	701a      	strb	r2, [r3, #0]
	  		  RHN= DHT11_Read(); // Relative humidity decimal
 80010c4:	f7ff ff24 	bl	8000f10 <DHT11_Read>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4ba0      	ldr	r3, [pc, #640]	; (8001350 <main+0x348>)
 80010ce:	701a      	strb	r2, [r3, #0]
	  		  TCI = DHT11_Read(); // Celsius integral
 80010d0:	f7ff ff1e 	bl	8000f10 <DHT11_Read>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b9e      	ldr	r3, [pc, #632]	; (8001354 <main+0x34c>)
 80010da:	701a      	strb	r2, [r3, #0]
	  		  TCD = DHT11_Read(); // Celsius decimal
 80010dc:	f7ff ff18 	bl	8000f10 <DHT11_Read>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b9c      	ldr	r3, [pc, #624]	; (8001358 <main+0x350>)
 80010e6:	701a      	strb	r2, [r3, #0]
	  		  SUM = DHT11_Read(); // Check sum
 80010e8:	f7ff ff12 	bl	8000f10 <DHT11_Read>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b9a      	ldr	r3, [pc, #616]	; (800135c <main+0x354>)
 80010f2:	701a      	strb	r2, [r3, #0]
	  		  if (RHS + RHN + TCI + TCD == SUM)
 80010f4:	4b95      	ldr	r3, [pc, #596]	; (800134c <main+0x344>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b95      	ldr	r3, [pc, #596]	; (8001350 <main+0x348>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a94      	ldr	r2, [pc, #592]	; (8001354 <main+0x34c>)
 8001102:	7812      	ldrb	r2, [r2, #0]
 8001104:	4413      	add	r3, r2
 8001106:	4a94      	ldr	r2, [pc, #592]	; (8001358 <main+0x350>)
 8001108:	7812      	ldrb	r2, [r2, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a93      	ldr	r2, [pc, #588]	; (800135c <main+0x354>)
 800110e:	7812      	ldrb	r2, [r2, #0]
 8001110:	4293      	cmp	r3, r2
 8001112:	f040 808f 	bne.w	8001234 <main+0x22c>
	  		  {
	  			  // Can use RHI and TCI for any purposes if whole number only needed
	  			  tCelsius = (float)TCI + (float)(TCD/10.0);
 8001116:	4b8f      	ldr	r3, [pc, #572]	; (8001354 <main+0x34c>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001122:	4b8d      	ldr	r3, [pc, #564]	; (8001358 <main+0x350>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f9f4 	bl	8000514 <__aeabi_i2d>
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b8b      	ldr	r3, [pc, #556]	; (8001360 <main+0x358>)
 8001132:	f7ff fb83 	bl	800083c <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fc85 	bl	8000a4c <__aeabi_d2f>
 8001142:	ee07 0a90 	vmov	s15, r0
 8001146:	ee78 7a27 	vadd.f32	s15, s16, s15
 800114a:	4b86      	ldr	r3, [pc, #536]	; (8001364 <main+0x35c>)
 800114c:	edc3 7a00 	vstr	s15, [r3]
	  			  tFahrenheit = tCelsius * 9/5 + 32;
 8001150:	4b84      	ldr	r3, [pc, #528]	; (8001364 <main+0x35c>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800115a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800115e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001166:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001368 <main+0x360>
 800116a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800116e:	4b7f      	ldr	r3, [pc, #508]	; (800136c <main+0x364>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
	  			  RH = (float)RHS + (float)(RHN/10.0);
 8001174:	4b75      	ldr	r3, [pc, #468]	; (800134c <main+0x344>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001180:	4b73      	ldr	r3, [pc, #460]	; (8001350 <main+0x348>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9c5 	bl	8000514 <__aeabi_i2d>
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b74      	ldr	r3, [pc, #464]	; (8001360 <main+0x358>)
 8001190:	f7ff fb54 	bl	800083c <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fc56 	bl	8000a4c <__aeabi_d2f>
 80011a0:	ee07 0a90 	vmov	s15, r0
 80011a4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80011a8:	4b71      	ldr	r3, [pc, #452]	; (8001370 <main+0x368>)
 80011aa:	edc3 7a00 	vstr	s15, [r3]
	  			  // Can use tCelsius, tFahrenheit and RH for any purposes
	  			  TFI = tFahrenheit;  // Fahrenheit integral
 80011ae:	4b6f      	ldr	r3, [pc, #444]	; (800136c <main+0x364>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80011bc:	793b      	ldrb	r3, [r7, #4]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b6c      	ldr	r3, [pc, #432]	; (8001374 <main+0x36c>)
 80011c2:	701a      	strb	r2, [r3, #0]
	  			  TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 80011c4:	4b69      	ldr	r3, [pc, #420]	; (800136c <main+0x364>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011d2:	4b68      	ldr	r3, [pc, #416]	; (8001374 <main+0x36c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80011f4:	793b      	ldrb	r3, [r7, #4]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b5f      	ldr	r3, [pc, #380]	; (8001378 <main+0x370>)
 80011fa:	701a      	strb	r2, [r3, #0]
	  			  SSD1306_GotoXY (0, 20);
 80011fc:	2114      	movs	r1, #20
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 fc1e 	bl	8001a40 <SSD1306_GotoXY>
	  			  sprintf(strCopy,"%d.%d C|%d.%d F", TCI, TCD, TFI, TFD);
 8001204:	4b53      	ldr	r3, [pc, #332]	; (8001354 <main+0x34c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	4b53      	ldr	r3, [pc, #332]	; (8001358 <main+0x350>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	4b58      	ldr	r3, [pc, #352]	; (8001374 <main+0x36c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b58      	ldr	r3, [pc, #352]	; (8001378 <main+0x370>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	9200      	str	r2, [sp, #0]
 800121e:	4603      	mov	r3, r0
 8001220:	460a      	mov	r2, r1
 8001222:	4956      	ldr	r1, [pc, #344]	; (800137c <main+0x374>)
 8001224:	4856      	ldr	r0, [pc, #344]	; (8001380 <main+0x378>)
 8001226:	f004 fad3 	bl	80057d0 <siprintf>
	  			  SSD1306_Puts (strCopy, &Font_7x10, 1);
 800122a:	2201      	movs	r2, #1
 800122c:	4955      	ldr	r1, [pc, #340]	; (8001384 <main+0x37c>)
 800122e:	4854      	ldr	r0, [pc, #336]	; (8001380 <main+0x378>)
 8001230:	f000 fc9c 	bl	8001b6c <SSD1306_Puts>
	  		  }
	  	  }
	  	 }

	  	 //////////////////////////////Ultrasonic
	  		 current_tick2=HAL_GetTick();
 8001234:	f000 ff6c 	bl	8002110 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
	  		 if(current_tick2-last_tick2>=100)
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b63      	cmp	r3, #99	; 0x63
 8001242:	f240 80c6 	bls.w	80013d2 <main+0x3ca>
	  		 {
	  			  current_tick2 = last_tick2;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	60bb      	str	r3, [r7, #8]
	  		      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f001 fa34 	bl	80026c0 <HAL_GPIO_WritePin>
	  		      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001258:	4b37      	ldr	r3, [pc, #220]	; (8001338 <main+0x330>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
	  		      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001260:	bf00      	nop
 8001262:	4b35      	ldr	r3, [pc, #212]	; (8001338 <main+0x330>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	2b09      	cmp	r3, #9
 800126a:	d9fa      	bls.n	8001262 <main+0x25a>
	  		      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f001 fa23 	bl	80026c0 <HAL_GPIO_WritePin>

	  		      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800127a:	f000 ff49 	bl	8002110 <HAL_GetTick>
 800127e:	4603      	mov	r3, r0
 8001280:	4a41      	ldr	r2, [pc, #260]	; (8001388 <main+0x380>)
 8001282:	6013      	str	r3, [r2, #0]
	  		      // wait for the echo pin to go high
	  		      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8001284:	bf00      	nop
 8001286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128e:	f001 f9ff 	bl	8002690 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d108      	bne.n	80012aa <main+0x2a2>
 8001298:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <main+0x380>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f103 040a 	add.w	r4, r3, #10
 80012a0:	f000 ff36 	bl	8002110 <HAL_GetTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	429c      	cmp	r4, r3
 80012a8:	d8ed      	bhi.n	8001286 <main+0x27e>
	  		      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <main+0x330>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	4a36      	ldr	r2, [pc, #216]	; (800138c <main+0x384>)
 80012b2:	6013      	str	r3, [r2, #0]

	  		      cMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80012b4:	f000 ff2c 	bl	8002110 <HAL_GetTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a35      	ldr	r2, [pc, #212]	; (8001390 <main+0x388>)
 80012bc:	6013      	str	r3, [r2, #0]
	  		      // wait for the echo pin to go low
	  		      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && cMillis + 50 > HAL_GetTick());
 80012be:	bf00      	nop
 80012c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c8:	f001 f9e2 	bl	8002690 <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d008      	beq.n	80012e4 <main+0x2dc>
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <main+0x388>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80012da:	f000 ff19 	bl	8002110 <HAL_GetTick>
 80012de:	4603      	mov	r3, r0
 80012e0:	429c      	cmp	r4, r3
 80012e2:	d8ed      	bhi.n	80012c0 <main+0x2b8>
	  		      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <main+0x330>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	4a2a      	ldr	r2, [pc, #168]	; (8001394 <main+0x38c>)
 80012ec:	6013      	str	r3, [r2, #0]

	  		      Distance = (Value2-Value1)* 0.034/2;
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <main+0x38c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <main+0x384>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8fb 	bl	80004f4 <__aeabi_ui2d>
 80012fe:	a30c      	add	r3, pc, #48	; (adr r3, 8001330 <main+0x328>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff f970 	bl	80005e8 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001318:	f7ff fa90 	bl	800083c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fb72 	bl	8000a0c <__aeabi_d2uiz>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	e034      	b.n	8001398 <main+0x390>
 800132e:	bf00      	nop
 8001330:	b020c49c 	.word	0xb020c49c
 8001334:	3fa16872 	.word	0x3fa16872
 8001338:	200000f0 	.word	0x200000f0
 800133c:	20000008 	.word	0x20000008
 8001340:	080060c4 	.word	0x080060c4
 8001344:	080060cc 	.word	0x080060cc
 8001348:	080060dc 	.word	0x080060dc
 800134c:	200001df 	.word	0x200001df
 8001350:	200001e0 	.word	0x200001e0
 8001354:	200001e1 	.word	0x200001e1
 8001358:	200001e2 	.word	0x200001e2
 800135c:	200001e3 	.word	0x200001e3
 8001360:	40240000 	.word	0x40240000
 8001364:	200001e8 	.word	0x200001e8
 8001368:	42000000 	.word	0x42000000
 800136c:	200001ec 	.word	0x200001ec
 8001370:	200001f0 	.word	0x200001f0
 8001374:	200001f4 	.word	0x200001f4
 8001378:	200001f5 	.word	0x200001f5
 800137c:	080060e8 	.word	0x080060e8
 8001380:	200001d0 	.word	0x200001d0
 8001384:	20000000 	.word	0x20000000
 8001388:	200001c0 	.word	0x200001c0
 800138c:	200001c4 	.word	0x200001c4
 8001390:	200001e4 	.word	0x200001e4
 8001394:	200001c8 	.word	0x200001c8
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <main+0x3fc>)
 800139a:	801a      	strh	r2, [r3, #0]

	  		      SSD1306_GotoXY (0,51);
 800139c:	2133      	movs	r1, #51	; 0x33
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 fb4e 	bl	8001a40 <SSD1306_GotoXY>
	  		      SSD1306_Puts ("   cm", &Font_7x10, 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	4918      	ldr	r1, [pc, #96]	; (8001408 <main+0x400>)
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <main+0x404>)
 80013aa:	f000 fbdf 	bl	8001b6c <SSD1306_Puts>
	  		      SSD1306_GotoXY (0, 51);
 80013ae:	2133      	movs	r1, #51	; 0x33
 80013b0:	2000      	movs	r0, #0
 80013b2:	f000 fb45 	bl	8001a40 <SSD1306_GotoXY>
	  		      sprintf(strCopy,"%d", Distance);
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <main+0x3fc>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4914      	ldr	r1, [pc, #80]	; (8001410 <main+0x408>)
 80013be:	4815      	ldr	r0, [pc, #84]	; (8001414 <main+0x40c>)
 80013c0:	f004 fa06 	bl	80057d0 <siprintf>
	  		      SSD1306_Puts (strCopy, &Font_7x10, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	4910      	ldr	r1, [pc, #64]	; (8001408 <main+0x400>)
 80013c8:	4812      	ldr	r0, [pc, #72]	; (8001414 <main+0x40c>)
 80013ca:	f000 fbcf 	bl	8001b6c <SSD1306_Puts>
	  		      SSD1306_UpdateScreen();
 80013ce:	f000 fa91 	bl	80018f4 <SSD1306_UpdateScreen>

	  		 }
	  		 if(Distance<=45/*cm*/ && TCI>=20/*°C*/)
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <main+0x3fc>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	2b2d      	cmp	r3, #45	; 0x2d
 80013d8:	d809      	bhi.n	80013ee <main+0x3e6>
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <main+0x410>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b13      	cmp	r3, #19
 80013e0:	d905      	bls.n	80013ee <main+0x3e6>
	  		 {
	  			 HAL_GPIO_WritePin(BUZ_PORT, BUZ_PIN, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	2108      	movs	r1, #8
 80013e6:	480d      	ldr	r0, [pc, #52]	; (800141c <main+0x414>)
 80013e8:	f001 f96a 	bl	80026c0 <HAL_GPIO_WritePin>
 80013ec:	e009      	b.n	8001402 <main+0x3fa>
	  		 }
	  		 else
	  		 {
	  			 if(Distance>45)
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <main+0x3fc>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	2b2d      	cmp	r3, #45	; 0x2d
 80013f4:	f67f ae4e 	bls.w	8001094 <main+0x8c>
	  			 {
	  		  		HAL_GPIO_WritePin(BUZ_PORT, BUZ_PIN, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2108      	movs	r1, #8
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <main+0x414>)
 80013fe:	f001 f95f 	bl	80026c0 <HAL_GPIO_WritePin>
	  current_tick=HAL_GetTick();
 8001402:	e647      	b.n	8001094 <main+0x8c>
 8001404:	200001cc 	.word	0x200001cc
 8001408:	20000000 	.word	0x20000000
 800140c:	080060f8 	.word	0x080060f8
 8001410:	08006100 	.word	0x08006100
 8001414:	200001d0 	.word	0x200001d0
 8001418:	200001e1 	.word	0x200001e1
 800141c:	48000800 	.word	0x48000800

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b096      	sub	sp, #88	; 0x58
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2244      	movs	r2, #68	; 0x44
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f004 f9c6 	bl	80057c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001442:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001446:	f001 fe83 	bl	8003150 <HAL_PWREx_ControlVoltageScaling>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001450:	f000 f986 	bl	8001760 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001454:	2302      	movs	r3, #2
 8001456:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145e:	2310      	movs	r3, #16
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001462:	2302      	movs	r3, #2
 8001464:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001466:	2302      	movs	r3, #2
 8001468:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800146a:	2301      	movs	r3, #1
 800146c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800146e:	230a      	movs	r3, #10
 8001470:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001472:	2307      	movs	r3, #7
 8001474:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001476:	2302      	movs	r3, #2
 8001478:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800147a:	2302      	movs	r3, #2
 800147c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4618      	mov	r0, r3
 8001484:	f001 feba 	bl	80031fc <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800148e:	f000 f967 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2303      	movs	r3, #3
 8001498:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	2104      	movs	r1, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fa82 	bl	80039b4 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014b6:	f000 f953 	bl	8001760 <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3758      	adds	r7, #88	; 0x58
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_I2C1_Init+0x74>)
 80014ca:	4a1c      	ldr	r2, [pc, #112]	; (800153c <MX_I2C1_Init+0x78>)
 80014cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_I2C1_Init+0x74>)
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <MX_I2C1_Init+0x7c>)
 80014d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_I2C1_Init+0x74>)
 80014dc:	2201      	movs	r2, #1
 80014de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_I2C1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_I2C1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <MX_I2C1_Init+0x74>)
 8001500:	f001 f8f6 	bl	80026f0 <HAL_I2C_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800150a:	f000 f929 	bl	8001760 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800150e:	2100      	movs	r1, #0
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <MX_I2C1_Init+0x74>)
 8001512:	f001 fd77 	bl	8003004 <HAL_I2CEx_ConfigAnalogFilter>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800151c:	f000 f920 	bl	8001760 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001520:	2100      	movs	r1, #0
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_I2C1_Init+0x74>)
 8001524:	f001 fdb9 	bl	800309a <HAL_I2CEx_ConfigDigitalFilter>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800152e:	f000 f917 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000009c 	.word	0x2000009c
 800153c:	40005400 	.word	0x40005400
 8001540:	00702991 	.word	0x00702991

08001544 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <MX_TIM1_Init+0xa0>)
 8001564:	4a20      	ldr	r2, [pc, #128]	; (80015e8 <MX_TIM1_Init+0xa4>)
 8001566:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <MX_TIM1_Init+0xa0>)
 800156a:	224f      	movs	r2, #79	; 0x4f
 800156c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_TIM1_Init+0xa0>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_TIM1_Init+0xa0>)
 8001576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800157a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_TIM1_Init+0xa0>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_TIM1_Init+0xa0>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_TIM1_Init+0xa0>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800158e:	4815      	ldr	r0, [pc, #84]	; (80015e4 <MX_TIM1_Init+0xa0>)
 8001590:	f003 f8f0 	bl	8004774 <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800159a:	f000 f8e1 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <MX_TIM1_Init+0xa0>)
 80015ac:	f003 f9a2 	bl	80048f4 <HAL_TIM_ConfigClockSource>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015b6:	f000 f8d3 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	4619      	mov	r1, r3
 80015ca:	4806      	ldr	r0, [pc, #24]	; (80015e4 <MX_TIM1_Init+0xa0>)
 80015cc:	f003 fb90 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015d6:	f000 f8c3 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200000f0 	.word	0x200000f0
 80015e8:	40012c00 	.word	0x40012c00

080015ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_USART2_UART_Init+0x58>)
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <MX_USART2_UART_Init+0x5c>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_USART2_UART_Init+0x58>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_USART2_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_USART2_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_USART2_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_USART2_UART_Init+0x58>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_USART2_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_USART2_UART_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_USART2_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_USART2_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_USART2_UART_Init+0x58>)
 8001630:	f003 fbe6 	bl	8004e00 <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800163a:	f000 f891 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000013c 	.word	0x2000013c
 8001648:	40004400 	.word	0x40004400

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <MX_GPIO_Init+0x10c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a3c      	ldr	r2, [pc, #240]	; (8001758 <MX_GPIO_Init+0x10c>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <MX_GPIO_Init+0x10c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <MX_GPIO_Init+0x10c>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a36      	ldr	r2, [pc, #216]	; (8001758 <MX_GPIO_Init+0x10c>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <MX_GPIO_Init+0x10c>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <MX_GPIO_Init+0x10c>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a30      	ldr	r2, [pc, #192]	; (8001758 <MX_GPIO_Init+0x10c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <MX_GPIO_Init+0x10c>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <MX_GPIO_Init+0x10c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a2a      	ldr	r2, [pc, #168]	; (8001758 <MX_GPIO_Init+0x10c>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_GPIO_Init+0x10c>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	210c      	movs	r1, #12
 80016c6:	4825      	ldr	r0, [pc, #148]	; (800175c <MX_GPIO_Init+0x110>)
 80016c8:	f000 fffa 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f240 2122 	movw	r1, #546	; 0x222
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f000 fff3 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	481a      	ldr	r0, [pc, #104]	; (800175c <MX_GPIO_Init+0x110>)
 80016f2:	f000 fe23 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016f6:	230c      	movs	r3, #12
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <MX_GPIO_Init+0x110>)
 800170e:	f000 fe15 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8001712:	f240 1301 	movw	r3, #257	; 0x101
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f000 fe07 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_9;
 800172e:	f240 2322 	movw	r3, #546	; 0x222
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f000 fdf7 	bl	800233c <HAL_GPIO_Init>

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	48000800 	.word	0x48000800

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	e7fe      	b.n	8001768 <Error_Handler+0x8>
	...

0800176c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001772:	f000 fa29 	bl	8001bc8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001776:	f644 6320 	movw	r3, #20000	; 0x4e20
 800177a:	2201      	movs	r2, #1
 800177c:	2178      	movs	r1, #120	; 0x78
 800177e:	485b      	ldr	r0, [pc, #364]	; (80018ec <SSD1306_Init+0x180>)
 8001780:	f001 f93a 	bl	80029f8 <HAL_I2C_IsDeviceReady>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800178a:	2300      	movs	r3, #0
 800178c:	e0a9      	b.n	80018e2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800178e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001792:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001794:	e002      	b.n	800179c <SSD1306_Init+0x30>
		p--;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3b01      	subs	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f9      	bne.n	8001796 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80017a2:	22ae      	movs	r2, #174	; 0xae
 80017a4:	2100      	movs	r1, #0
 80017a6:	2078      	movs	r0, #120	; 0x78
 80017a8:	f000 fa8a 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80017ac:	2220      	movs	r2, #32
 80017ae:	2100      	movs	r1, #0
 80017b0:	2078      	movs	r0, #120	; 0x78
 80017b2:	f000 fa85 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80017b6:	2210      	movs	r2, #16
 80017b8:	2100      	movs	r1, #0
 80017ba:	2078      	movs	r0, #120	; 0x78
 80017bc:	f000 fa80 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017c0:	22b0      	movs	r2, #176	; 0xb0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2078      	movs	r0, #120	; 0x78
 80017c6:	f000 fa7b 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80017ca:	22c8      	movs	r2, #200	; 0xc8
 80017cc:	2100      	movs	r1, #0
 80017ce:	2078      	movs	r0, #120	; 0x78
 80017d0:	f000 fa76 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	2078      	movs	r0, #120	; 0x78
 80017da:	f000 fa71 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80017de:	2210      	movs	r2, #16
 80017e0:	2100      	movs	r1, #0
 80017e2:	2078      	movs	r0, #120	; 0x78
 80017e4:	f000 fa6c 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	2100      	movs	r1, #0
 80017ec:	2078      	movs	r0, #120	; 0x78
 80017ee:	f000 fa67 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80017f2:	2281      	movs	r2, #129	; 0x81
 80017f4:	2100      	movs	r1, #0
 80017f6:	2078      	movs	r0, #120	; 0x78
 80017f8:	f000 fa62 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80017fc:	22ff      	movs	r2, #255	; 0xff
 80017fe:	2100      	movs	r1, #0
 8001800:	2078      	movs	r0, #120	; 0x78
 8001802:	f000 fa5d 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001806:	22a1      	movs	r2, #161	; 0xa1
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	; 0x78
 800180c:	f000 fa58 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001810:	22a6      	movs	r2, #166	; 0xa6
 8001812:	2100      	movs	r1, #0
 8001814:	2078      	movs	r0, #120	; 0x78
 8001816:	f000 fa53 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800181a:	22a8      	movs	r2, #168	; 0xa8
 800181c:	2100      	movs	r1, #0
 800181e:	2078      	movs	r0, #120	; 0x78
 8001820:	f000 fa4e 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001824:	223f      	movs	r2, #63	; 0x3f
 8001826:	2100      	movs	r1, #0
 8001828:	2078      	movs	r0, #120	; 0x78
 800182a:	f000 fa49 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800182e:	22a4      	movs	r2, #164	; 0xa4
 8001830:	2100      	movs	r1, #0
 8001832:	2078      	movs	r0, #120	; 0x78
 8001834:	f000 fa44 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001838:	22d3      	movs	r2, #211	; 0xd3
 800183a:	2100      	movs	r1, #0
 800183c:	2078      	movs	r0, #120	; 0x78
 800183e:	f000 fa3f 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	2078      	movs	r0, #120	; 0x78
 8001848:	f000 fa3a 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800184c:	22d5      	movs	r2, #213	; 0xd5
 800184e:	2100      	movs	r1, #0
 8001850:	2078      	movs	r0, #120	; 0x78
 8001852:	f000 fa35 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001856:	22f0      	movs	r2, #240	; 0xf0
 8001858:	2100      	movs	r1, #0
 800185a:	2078      	movs	r0, #120	; 0x78
 800185c:	f000 fa30 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001860:	22d9      	movs	r2, #217	; 0xd9
 8001862:	2100      	movs	r1, #0
 8001864:	2078      	movs	r0, #120	; 0x78
 8001866:	f000 fa2b 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800186a:	2222      	movs	r2, #34	; 0x22
 800186c:	2100      	movs	r1, #0
 800186e:	2078      	movs	r0, #120	; 0x78
 8001870:	f000 fa26 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001874:	22da      	movs	r2, #218	; 0xda
 8001876:	2100      	movs	r1, #0
 8001878:	2078      	movs	r0, #120	; 0x78
 800187a:	f000 fa21 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800187e:	2212      	movs	r2, #18
 8001880:	2100      	movs	r1, #0
 8001882:	2078      	movs	r0, #120	; 0x78
 8001884:	f000 fa1c 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001888:	22db      	movs	r2, #219	; 0xdb
 800188a:	2100      	movs	r1, #0
 800188c:	2078      	movs	r0, #120	; 0x78
 800188e:	f000 fa17 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001892:	2220      	movs	r2, #32
 8001894:	2100      	movs	r1, #0
 8001896:	2078      	movs	r0, #120	; 0x78
 8001898:	f000 fa12 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800189c:	228d      	movs	r2, #141	; 0x8d
 800189e:	2100      	movs	r1, #0
 80018a0:	2078      	movs	r0, #120	; 0x78
 80018a2:	f000 fa0d 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80018a6:	2214      	movs	r2, #20
 80018a8:	2100      	movs	r1, #0
 80018aa:	2078      	movs	r0, #120	; 0x78
 80018ac:	f000 fa08 	bl	8001cc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80018b0:	22af      	movs	r2, #175	; 0xaf
 80018b2:	2100      	movs	r1, #0
 80018b4:	2078      	movs	r0, #120	; 0x78
 80018b6:	f000 fa03 	bl	8001cc0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80018ba:	222e      	movs	r2, #46	; 0x2e
 80018bc:	2100      	movs	r1, #0
 80018be:	2078      	movs	r0, #120	; 0x78
 80018c0:	f000 f9fe 	bl	8001cc0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f000 f843 	bl	8001950 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80018ca:	f000 f813 	bl	80018f4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <SSD1306_Init+0x184>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <SSD1306_Init+0x184>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SSD1306_Init+0x184>)
 80018dc:	2201      	movs	r2, #1
 80018de:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000009c 	.word	0x2000009c
 80018f0:	200005f8 	.word	0x200005f8

080018f4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	e01d      	b.n	800193c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	3b50      	subs	r3, #80	; 0x50
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	2100      	movs	r1, #0
 800190a:	2078      	movs	r0, #120	; 0x78
 800190c:	f000 f9d8 	bl	8001cc0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2078      	movs	r0, #120	; 0x78
 8001916:	f000 f9d3 	bl	8001cc0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800191a:	2210      	movs	r2, #16
 800191c:	2100      	movs	r1, #0
 800191e:	2078      	movs	r0, #120	; 0x78
 8001920:	f000 f9ce 	bl	8001cc0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	01db      	lsls	r3, r3, #7
 8001928:	4a08      	ldr	r2, [pc, #32]	; (800194c <SSD1306_UpdateScreen+0x58>)
 800192a:	441a      	add	r2, r3
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	2140      	movs	r1, #64	; 0x40
 8001930:	2078      	movs	r0, #120	; 0x78
 8001932:	f000 f95f 	bl	8001bf4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	3301      	adds	r3, #1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b07      	cmp	r3, #7
 8001940:	d9de      	bls.n	8001900 <SSD1306_UpdateScreen+0xc>
	}
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200001f8 	.word	0x200001f8

08001950 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <SSD1306_Fill+0x14>
 8001960:	2300      	movs	r3, #0
 8001962:	e000      	b.n	8001966 <SSD1306_Fill+0x16>
 8001964:	23ff      	movs	r3, #255	; 0xff
 8001966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196a:	4619      	mov	r1, r3
 800196c:	4803      	ldr	r0, [pc, #12]	; (800197c <SSD1306_Fill+0x2c>)
 800196e:	f003 ff27 	bl	80057c0 <memset>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200001f8 	.word	0x200001f8

08001980 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
 800198a:	460b      	mov	r3, r1
 800198c:	80bb      	strh	r3, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	70fb      	strb	r3, [r7, #3]
	if (
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	2b7f      	cmp	r3, #127	; 0x7f
 8001996:	d848      	bhi.n	8001a2a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	2b3f      	cmp	r3, #63	; 0x3f
 800199c:	d845      	bhi.n	8001a2a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <SSD1306_DrawPixel+0xb8>)
 80019a0:	791b      	ldrb	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d11a      	bne.n	80019f0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	88bb      	ldrh	r3, [r7, #4]
 80019be:	08db      	lsrs	r3, r3, #3
 80019c0:	b298      	uxth	r0, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	01db      	lsls	r3, r3, #7
 80019c6:	4413      	add	r3, r2
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <SSD1306_DrawPixel+0xbc>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	b25a      	sxtb	r2, r3
 80019ce:	88bb      	ldrh	r3, [r7, #4]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	4313      	orrs	r3, r2
 80019de:	b259      	sxtb	r1, r3
 80019e0:	88fa      	ldrh	r2, [r7, #6]
 80019e2:	4603      	mov	r3, r0
 80019e4:	01db      	lsls	r3, r3, #7
 80019e6:	4413      	add	r3, r2
 80019e8:	b2c9      	uxtb	r1, r1
 80019ea:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <SSD1306_DrawPixel+0xbc>)
 80019ec:	54d1      	strb	r1, [r2, r3]
 80019ee:	e01d      	b.n	8001a2c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019f0:	88fa      	ldrh	r2, [r7, #6]
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	b298      	uxth	r0, r3
 80019f8:	4603      	mov	r3, r0
 80019fa:	01db      	lsls	r3, r3, #7
 80019fc:	4413      	add	r3, r2
 80019fe:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <SSD1306_DrawPixel+0xbc>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	b25a      	sxtb	r2, r3
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	4013      	ands	r3, r2
 8001a18:	b259      	sxtb	r1, r3
 8001a1a:	88fa      	ldrh	r2, [r7, #6]
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	01db      	lsls	r3, r3, #7
 8001a20:	4413      	add	r3, r2
 8001a22:	b2c9      	uxtb	r1, r1
 8001a24:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <SSD1306_DrawPixel+0xbc>)
 8001a26:	54d1      	strb	r1, [r2, r3]
 8001a28:	e000      	b.n	8001a2c <SSD1306_DrawPixel+0xac>
		return;
 8001a2a:	bf00      	nop
	}
}
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	200005f8 	.word	0x200005f8
 8001a3c:	200001f8 	.word	0x200001f8

08001a40 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	460a      	mov	r2, r1
 8001a4a:	80fb      	strh	r3, [r7, #6]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a50:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <SSD1306_GotoXY+0x28>)
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <SSD1306_GotoXY+0x28>)
 8001a58:	88bb      	ldrh	r3, [r7, #4]
 8001a5a:	8053      	strh	r3, [r2, #2]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	200005f8 	.word	0x200005f8

08001a6c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <SSD1306_Putc+0xfc>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
	if (
 8001a88:	2b7f      	cmp	r3, #127	; 0x7f
 8001a8a:	dc07      	bgt.n	8001a9c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a8c:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <SSD1306_Putc+0xfc>)
 8001a8e:	885b      	ldrh	r3, [r3, #2]
 8001a90:	461a      	mov	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	785b      	ldrb	r3, [r3, #1]
 8001a96:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a98:	2b3f      	cmp	r3, #63	; 0x3f
 8001a9a:	dd01      	ble.n	8001aa0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e05e      	b.n	8001b5e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e04b      	b.n	8001b3e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	3b20      	subs	r3, #32
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	7849      	ldrb	r1, [r1, #1]
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	440b      	add	r3, r1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	e030      	b.n	8001b2c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d010      	beq.n	8001afc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <SSD1306_Putc+0xfc>)
 8001adc:	881a      	ldrh	r2, [r3, #0]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b298      	uxth	r0, r3
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <SSD1306_Putc+0xfc>)
 8001ae8:	885a      	ldrh	r2, [r3, #2]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	79ba      	ldrb	r2, [r7, #6]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff ff43 	bl	8001980 <SSD1306_DrawPixel>
 8001afa:	e014      	b.n	8001b26 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <SSD1306_Putc+0xfc>)
 8001afe:	881a      	ldrh	r2, [r3, #0]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	b298      	uxth	r0, r3
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <SSD1306_Putc+0xfc>)
 8001b0a:	885a      	ldrh	r2, [r3, #2]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	b299      	uxth	r1, r3
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	f7ff ff2d 	bl	8001980 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d3c8      	bcc.n	8001aca <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	785b      	ldrb	r3, [r3, #1]
 8001b42:	461a      	mov	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d3ad      	bcc.n	8001aa6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <SSD1306_Putc+0xfc>)
 8001b4c:	881a      	ldrh	r2, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <SSD1306_Putc+0xfc>)
 8001b5a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200005f8 	.word	0x200005f8

08001b6c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	4613      	mov	r3, r2
 8001b78:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b7a:	e012      	b.n	8001ba2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	79fa      	ldrb	r2, [r7, #7]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff71 	bl	8001a6c <SSD1306_Putc>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d002      	beq.n	8001b9c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	e008      	b.n	8001bae <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1e8      	bne.n	8001b7c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	781b      	ldrb	r3, [r3, #0]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7ff fec8 	bl	8001950 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001bc0:	f7ff fe98 	bl	80018f4 <SSD1306_UpdateScreen>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <ssd1306_I2C_Init+0x28>)
 8001bd0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bd2:	e002      	b.n	8001bda <ssd1306_I2C_Init+0x12>
		p--;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f9      	bne.n	8001bd4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	0003d090 	.word	0x0003d090

08001bf4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b0c7      	sub	sp, #284	; 0x11c
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001c02:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001c06:	600a      	str	r2, [r1, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c0e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001c12:	4622      	mov	r2, r4
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c1a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001c1e:	4602      	mov	r2, r0
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001c2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c36:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c3a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001c3e:	7812      	ldrb	r2, [r2, #0]
 8001c40:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c48:	e015      	b.n	8001c76 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001c4a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c4e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c52:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	441a      	add	r2, r3
 8001c5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c5e:	3301      	adds	r3, #1
 8001c60:	7811      	ldrb	r1, [r2, #0]
 8001c62:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c66:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001c6a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c6c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c70:	3301      	adds	r3, #1
 8001c72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c80:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d8df      	bhi.n	8001c4a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c8e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b299      	uxth	r1, r3
 8001c96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f107 020c 	add.w	r2, r7, #12
 8001ca8:	200a      	movs	r0, #10
 8001caa:	9000      	str	r0, [sp, #0]
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <ssd1306_I2C_WriteMulti+0xc8>)
 8001cae:	f000 fdaf 	bl	8002810 <HAL_I2C_Master_Transmit>
}
 8001cb2:	bf00      	nop
 8001cb4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}
 8001cbc:	2000009c 	.word	0x2000009c

08001cc0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	71bb      	strb	r3, [r7, #6]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001cd6:	797b      	ldrb	r3, [r7, #5]
 8001cd8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	b299      	uxth	r1, r3
 8001cde:	f107 020c 	add.w	r2, r7, #12
 8001ce2:	230a      	movs	r3, #10
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <ssd1306_I2C_Write+0x38>)
 8001cea:	f000 fd91 	bl	8002810 <HAL_I2C_Master_Transmit>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000009c 	.word	0x2000009c

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_MspInit+0x44>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_MspInit+0x44>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_MspInit+0x44>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_MspInit+0x44>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_MspInit+0x44>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0ac      	sub	sp, #176	; 0xb0
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2288      	movs	r2, #136	; 0x88
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fd2b 	bl	80057c0 <memset>
  if(hi2c->Instance==I2C1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <HAL_I2C_MspInit+0xb0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d13a      	bne.n	8001dea <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d74:	2340      	movs	r3, #64	; 0x40
 8001d76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 f83b 	bl	8003dfc <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d8c:	f7ff fce8 	bl	8001760 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_I2C_MspInit+0xb4>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d94:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <HAL_I2C_MspInit+0xb4>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_I2C_MspInit+0xb4>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da8:	23c0      	movs	r3, #192	; 0xc0
 8001daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dae:	2312      	movs	r3, #18
 8001db0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480b      	ldr	r0, [pc, #44]	; (8001dfc <HAL_I2C_MspInit+0xb8>)
 8001dce:	f000 fab5 	bl	800233c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_I2C_MspInit+0xb4>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_I2C_MspInit+0xb4>)
 8001dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_I2C_MspInit+0xb4>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	37b0      	adds	r7, #176	; 0xb0
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40005400 	.word	0x40005400
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	48000400 	.word	0x48000400

08001e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_TIM_Base_MspInit+0x38>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10b      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_TIM_Base_MspInit+0x3c>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_TIM_Base_MspInit+0x3c>)
 8001e18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HAL_TIM_Base_MspInit+0x3c>)
 8001e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40012c00 	.word	0x40012c00
 8001e3c:	40021000 	.word	0x40021000

08001e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b0ac      	sub	sp, #176	; 0xb0
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2288      	movs	r2, #136	; 0x88
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 fcad 	bl	80057c0 <memset>
  if(huart->Instance==USART2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <HAL_UART_MspInit+0xb0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d13b      	bne.n	8001ee8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e70:	2302      	movs	r3, #2
 8001e72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 ffbd 	bl	8003dfc <HAL_RCCEx_PeriphCLKConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e88:	f7ff fc6a 	bl	8001760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_UART_MspInit+0xb4>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_UART_MspInit+0xb4>)
 8001e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e96:	6593      	str	r3, [r2, #88]	; 0x58
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_UART_MspInit+0xb4>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_UART_MspInit+0xb4>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <HAL_UART_MspInit+0xb4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_UART_MspInit+0xb4>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ebc:	230c      	movs	r3, #12
 8001ebe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee4:	f000 fa2a 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ee8:	bf00      	nop
 8001eea:	37b0      	adds	r7, #176	; 0xb0
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40004400 	.word	0x40004400
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <NMI_Handler+0x4>

08001efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <HardFault_Handler+0x4>

08001f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <MemManage_Handler+0x4>

08001f0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <BusFault_Handler+0x4>

08001f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <UsageFault_Handler+0x4>

08001f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f44:	f000 f8d0 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <_sbrk+0x5c>)
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <_sbrk+0x60>)
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <_sbrk+0x64>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <_sbrk+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d207      	bcs.n	8001f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f7c:	f003 fbf6 	bl	800576c <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e009      	b.n	8001fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <_sbrk+0x64>)
 8001f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20018000 	.word	0x20018000
 8001fac:	00000400 	.word	0x00000400
 8001fb0:	20000600 	.word	0x20000600
 8001fb4:	20000618 	.word	0x20000618

08001fb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <SystemInit+0x20>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <SystemInit+0x20>)
 8001fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fe0:	f7ff ffea 	bl	8001fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fe6:	490d      	ldr	r1, [pc, #52]	; (800201c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <LoopForever+0xe>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fec:	e002      	b.n	8001ff4 <LoopCopyDataInit>

08001fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff2:	3304      	adds	r3, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff8:	d3f9      	bcc.n	8001fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ffc:	4c0a      	ldr	r4, [pc, #40]	; (8002028 <LoopForever+0x16>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002000:	e001      	b.n	8002006 <LoopFillZerobss>

08002002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002004:	3204      	adds	r2, #4

08002006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002008:	d3fb      	bcc.n	8002002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800200a:	f003 fbb5 	bl	8005778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800200e:	f7fe fffb 	bl	8001008 <main>

08002012 <LoopForever>:

LoopForever:
    b LoopForever
 8002012:	e7fe      	b.n	8002012 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002014:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002020:	08007658 	.word	0x08007658
  ldr r2, =_sbss
 8002024:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002028:	20000618 	.word	0x20000618

0800202c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_2_IRQHandler>
	...

08002030 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_Init+0x3c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_Init+0x3c>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002046:	2003      	movs	r0, #3
 8002048:	f000 f944 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800204c:	2000      	movs	r0, #0
 800204e:	f000 f80f 	bl	8002070 <HAL_InitTick>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	71fb      	strb	r3, [r7, #7]
 800205c:	e001      	b.n	8002062 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800205e:	f7ff fe4d 	bl	8001cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002062:	79fb      	ldrb	r3, [r7, #7]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40022000 	.word	0x40022000

08002070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_InitTick+0x6c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_InitTick+0x70>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_InitTick+0x6c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	fbb3 f3f1 	udiv	r3, r3, r1
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f941 	bl	8002322 <HAL_SYSTICK_Config>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d809      	bhi.n	80020c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f000 f919 	bl	80022ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_InitTick+0x74>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e007      	b.n	80020d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e004      	b.n	80020d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	e001      	b.n	80020d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000018 	.word	0x20000018
 80020e0:	20000010 	.word	0x20000010
 80020e4:	20000014 	.word	0x20000014

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000018 	.word	0x20000018
 800210c:	20000604 	.word	0x20000604

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000604 	.word	0x20000604

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000018 	.word	0x20000018

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	; (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	; 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a0:	d301      	bcc.n	80022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00f      	b.n	80022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <SysTick_Config+0x40>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f7ff ff8e 	bl	80021d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <SysTick_Config+0x40>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <SysTick_Config+0x40>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff47 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022fc:	f7ff ff5c 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 8002300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	6978      	ldr	r0, [r7, #20]
 8002308:	f7ff ff8e 	bl	8002228 <NVIC_EncodePriority>
 800230c:	4602      	mov	r2, r0
 800230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff5d 	bl	80021d4 <__NVIC_SetPriority>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffb0 	bl	8002290 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234a:	e17f      	b.n	800264c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8171 	beq.w	8002646 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d005      	beq.n	800237c <HAL_GPIO_Init+0x40>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d130      	bne.n	80023de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b2:	2201      	movs	r2, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 0201 	and.w	r2, r3, #1
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d118      	bne.n	800241c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023f0:	2201      	movs	r2, #1
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	f003 0201 	and.w	r2, r3, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b03      	cmp	r3, #3
 8002426:	d017      	beq.n	8002458 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d123      	bne.n	80024ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	08da      	lsrs	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3208      	adds	r2, #8
 800246c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	220f      	movs	r2, #15
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	08da      	lsrs	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3208      	adds	r2, #8
 80024a6:	6939      	ldr	r1, [r7, #16]
 80024a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80ac 	beq.w	8002646 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ee:	4b5f      	ldr	r3, [pc, #380]	; (800266c <HAL_GPIO_Init+0x330>)
 80024f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f2:	4a5e      	ldr	r2, [pc, #376]	; (800266c <HAL_GPIO_Init+0x330>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6613      	str	r3, [r2, #96]	; 0x60
 80024fa:	4b5c      	ldr	r3, [pc, #368]	; (800266c <HAL_GPIO_Init+0x330>)
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002506:	4a5a      	ldr	r2, [pc, #360]	; (8002670 <HAL_GPIO_Init+0x334>)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002530:	d025      	beq.n	800257e <HAL_GPIO_Init+0x242>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4f      	ldr	r2, [pc, #316]	; (8002674 <HAL_GPIO_Init+0x338>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01f      	beq.n	800257a <HAL_GPIO_Init+0x23e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4e      	ldr	r2, [pc, #312]	; (8002678 <HAL_GPIO_Init+0x33c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d019      	beq.n	8002576 <HAL_GPIO_Init+0x23a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4d      	ldr	r2, [pc, #308]	; (800267c <HAL_GPIO_Init+0x340>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_GPIO_Init+0x236>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4c      	ldr	r2, [pc, #304]	; (8002680 <HAL_GPIO_Init+0x344>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00d      	beq.n	800256e <HAL_GPIO_Init+0x232>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <HAL_GPIO_Init+0x348>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <HAL_GPIO_Init+0x22e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4a      	ldr	r2, [pc, #296]	; (8002688 <HAL_GPIO_Init+0x34c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_GPIO_Init+0x22a>
 8002562:	2306      	movs	r3, #6
 8002564:	e00c      	b.n	8002580 <HAL_GPIO_Init+0x244>
 8002566:	2307      	movs	r3, #7
 8002568:	e00a      	b.n	8002580 <HAL_GPIO_Init+0x244>
 800256a:	2305      	movs	r3, #5
 800256c:	e008      	b.n	8002580 <HAL_GPIO_Init+0x244>
 800256e:	2304      	movs	r3, #4
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x244>
 8002572:	2303      	movs	r3, #3
 8002574:	e004      	b.n	8002580 <HAL_GPIO_Init+0x244>
 8002576:	2302      	movs	r3, #2
 8002578:	e002      	b.n	8002580 <HAL_GPIO_Init+0x244>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x244>
 800257e:	2300      	movs	r3, #0
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	f002 0203 	and.w	r2, r2, #3
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	4093      	lsls	r3, r2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002590:	4937      	ldr	r1, [pc, #220]	; (8002670 <HAL_GPIO_Init+0x334>)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3302      	adds	r3, #2
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_GPIO_Init+0x350>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025c2:	4a32      	ldr	r2, [pc, #200]	; (800268c <HAL_GPIO_Init+0x350>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025c8:	4b30      	ldr	r3, [pc, #192]	; (800268c <HAL_GPIO_Init+0x350>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ec:	4a27      	ldr	r2, [pc, #156]	; (800268c <HAL_GPIO_Init+0x350>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025f2:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_GPIO_Init+0x350>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <HAL_GPIO_Init+0x350>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_GPIO_Init+0x350>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002640:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_GPIO_Init+0x350>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	f47f ae78 	bne.w	800234c <HAL_GPIO_Init+0x10>
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	40010000 	.word	0x40010000
 8002674:	48000400 	.word	0x48000400
 8002678:	48000800 	.word	0x48000800
 800267c:	48000c00 	.word	0x48000c00
 8002680:	48001000 	.word	0x48001000
 8002684:	48001400 	.word	0x48001400
 8002688:	48001800 	.word	0x48001800
 800268c:	40010400 	.word	0x40010400

08002690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	887b      	ldrh	r3, [r7, #2]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e001      	b.n	80026b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026dc:	e002      	b.n	80026e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e081      	b.n	8002806 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fb14 	bl	8001d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	; 0x24
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002740:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002750:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	e006      	b.n	8002778 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002776:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d104      	bne.n	800278a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002788:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69d9      	ldr	r1, [r3, #28]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	461a      	mov	r2, r3
 800281c:	460b      	mov	r3, r1
 800281e:	817b      	strh	r3, [r7, #10]
 8002820:	4613      	mov	r3, r2
 8002822:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b20      	cmp	r3, #32
 800282e:	f040 80da 	bne.w	80029e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_I2C_Master_Transmit+0x30>
 800283c:	2302      	movs	r3, #2
 800283e:	e0d3      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x1d8>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002848:	f7ff fc62 	bl	8002110 <HAL_GetTick>
 800284c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	2319      	movs	r3, #25
 8002854:	2201      	movs	r2, #1
 8002856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f9f7 	bl	8002c4e <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0be      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2221      	movs	r2, #33	; 0x21
 800286e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2210      	movs	r2, #16
 8002876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	893a      	ldrh	r2, [r7, #8]
 800288a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	2bff      	cmp	r3, #255	; 0xff
 800289a:	d90e      	bls.n	80028ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	22ff      	movs	r2, #255	; 0xff
 80028a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	8979      	ldrh	r1, [r7, #10]
 80028aa:	4b51      	ldr	r3, [pc, #324]	; (80029f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fb74 	bl	8002fa0 <I2C_TransferConfig>
 80028b8:	e06c      	b.n	8002994 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	8979      	ldrh	r1, [r7, #10]
 80028cc:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fb63 	bl	8002fa0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028da:	e05b      	b.n	8002994 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	6a39      	ldr	r1, [r7, #32]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f9f4 	bl	8002cce <I2C_WaitOnTXISFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e07b      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d034      	beq.n	8002994 <HAL_I2C_Master_Transmit+0x184>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	2b00      	cmp	r3, #0
 8002930:	d130      	bne.n	8002994 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	2200      	movs	r2, #0
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f986 	bl	8002c4e <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e04d      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	2bff      	cmp	r3, #255	; 0xff
 8002954:	d90e      	bls.n	8002974 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	22ff      	movs	r2, #255	; 0xff
 800295a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	b2da      	uxtb	r2, r3
 8002962:	8979      	ldrh	r1, [r7, #10]
 8002964:	2300      	movs	r3, #0
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fb17 	bl	8002fa0 <I2C_TransferConfig>
 8002972:	e00f      	b.n	8002994 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	b2da      	uxtb	r2, r3
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	2300      	movs	r3, #0
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fb06 	bl	8002fa0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d19e      	bne.n	80028dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	6a39      	ldr	r1, [r7, #32]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f9d3 	bl	8002d4e <I2C_WaitOnSTOPFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e01a      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2220      	movs	r2, #32
 80029b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80029c6:	400b      	ands	r3, r1
 80029c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e000      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
  }
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	80002000 	.word	0x80002000
 80029f4:	fe00e800 	.word	0xfe00e800

080029f8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	460b      	mov	r3, r1
 8002a06:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	f040 80f1 	bne.w	8002bfc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0e7      	b.n	8002bfe <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_I2C_IsDeviceReady+0x44>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e0e0      	b.n	8002bfe <HAL_I2C_IsDeviceReady+0x206>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <HAL_I2C_IsDeviceReady+0x72>
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a68:	e004      	b.n	8002a74 <HAL_I2C_IsDeviceReady+0x7c>
 8002a6a:	897b      	ldrh	r3, [r7, #10]
 8002a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a70:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002a7a:	f7ff fb49 	bl	8002110 <HAL_GetTick>
 8002a7e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002aac:	e034      	b.n	8002b18 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d01a      	beq.n	8002aec <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ab6:	f7ff fb2b 	bl	8002110 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <HAL_I2C_IsDeviceReady+0xd4>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e088      	b.n	8002bfe <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	bf0c      	ite	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	2300      	movne	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b18:	7ffb      	ldrb	r3, [r7, #31]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <HAL_I2C_IsDeviceReady+0x12c>
 8002b1e:	7fbb      	ldrb	r3, [r7, #30]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0c4      	beq.n	8002aae <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d01a      	beq.n	8002b68 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f886 	bl	8002c4e <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e058      	b.n	8002bfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2220      	movs	r2, #32
 8002b52:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e04a      	b.n	8002bfe <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2120      	movs	r1, #32
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f86b 	bl	8002c4e <I2C_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e03d      	b.n	8002bfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2210      	movs	r2, #16
 8002b88:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d118      	bne.n	8002bcc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ba8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2120      	movs	r1, #32
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f84a 	bl	8002c4e <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e01c      	b.n	8002bfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	f63f af3b 	bhi.w	8002a52 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d103      	bne.n	8002c24 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2200      	movs	r2, #0
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d007      	beq.n	8002c42 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	619a      	str	r2, [r3, #24]
  }
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c5e:	e022      	b.n	8002ca6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	d01e      	beq.n	8002ca6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c68:	f7ff fa52 	bl	8002110 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d302      	bcc.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d113      	bne.n	8002ca6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00f      	b.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699a      	ldr	r2, [r3, #24]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d0cd      	beq.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cda:	e02c      	b.n	8002d36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f871 	bl	8002dc8 <I2C_IsErrorOccurred>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e02a      	b.n	8002d46 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d01e      	beq.n	8002d36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf8:	f7ff fa0a 	bl	8002110 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d302      	bcc.n	8002d0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d113      	bne.n	8002d36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e007      	b.n	8002d46 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d1cb      	bne.n	8002cdc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d5a:	e028      	b.n	8002dae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f831 	bl	8002dc8 <I2C_IsErrorOccurred>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e026      	b.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d70:	f7ff f9ce 	bl	8002110 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d302      	bcc.n	8002d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d113      	bne.n	8002dae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f043 0220 	orr.w	r2, r3, #32
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e007      	b.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d1cf      	bne.n	8002d5c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d075      	beq.n	8002ee0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2210      	movs	r2, #16
 8002dfa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dfc:	e056      	b.n	8002eac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d052      	beq.n	8002eac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e06:	f7ff f983 	bl	8002110 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <I2C_IsErrorOccurred+0x54>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d147      	bne.n	8002eac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3e:	d12e      	bne.n	8002e9e <I2C_IsErrorOccurred+0xd6>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e46:	d02a      	beq.n	8002e9e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d027      	beq.n	8002e9e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e5e:	f7ff f957 	bl	8002110 <HAL_GetTick>
 8002e62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e64:	e01b      	b.n	8002e9e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e66:	f7ff f953 	bl	8002110 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b19      	cmp	r3, #25
 8002e72:	d914      	bls.n	8002e9e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d1dc      	bne.n	8002e66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d003      	beq.n	8002ec2 <I2C_IsErrorOccurred+0xfa>
 8002eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d09d      	beq.n	8002dfe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f043 0304 	orr.w	r3, r3, #4
 8002ed8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f043 0308 	orr.w	r3, r3, #8
 8002f1a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01c      	beq.n	8002f90 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff fe55 	bl	8002c06 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6859      	ldr	r1, [r3, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <I2C_IsErrorOccurred+0x1d4>)
 8002f68:	400b      	ands	r3, r1
 8002f6a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3728      	adds	r7, #40	; 0x28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	fe00e800 	.word	0xfe00e800

08002fa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	817b      	strh	r3, [r7, #10]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fb8:	7a7b      	ldrb	r3, [r7, #9]
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	0d5b      	lsrs	r3, r3, #21
 8002fda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <I2C_TransferConfig+0x60>)
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	ea02 0103 	and.w	r1, r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	03ff63ff 	.word	0x03ff63ff

08003004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b20      	cmp	r3, #32
 8003018:	d138      	bne.n	800308c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003024:	2302      	movs	r3, #2
 8003026:	e032      	b.n	800308e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003056:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d139      	bne.n	8003124 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e033      	b.n	8003126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2224      	movs	r2, #36	; 0x24
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <HAL_PWREx_GetVoltageRange+0x18>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40007000 	.word	0x40007000

08003150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315e:	d130      	bne.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316c:	d038      	beq.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003176:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2232      	movs	r2, #50	; 0x32
 8003184:	fb02 f303 	mul.w	r3, r2, r3
 8003188:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0c9b      	lsrs	r3, r3, #18
 8003190:	3301      	adds	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003194:	e002      	b.n	800319c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3b01      	subs	r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d102      	bne.n	80031b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f2      	bne.n	8003196 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031bc:	d110      	bne.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e00f      	b.n	80031e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d007      	beq.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031d8:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40007000 	.word	0x40007000
 80031f4:	20000010 	.word	0x20000010
 80031f8:	431bde83 	.word	0x431bde83

080031fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e3ca      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320e:	4b97      	ldr	r3, [pc, #604]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003218:	4b94      	ldr	r3, [pc, #592]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80e4 	beq.w	80033f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <HAL_RCC_OscConfig+0x4a>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b0c      	cmp	r3, #12
 800323a:	f040 808b 	bne.w	8003354 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b01      	cmp	r3, #1
 8003242:	f040 8087 	bne.w	8003354 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003246:	4b89      	ldr	r3, [pc, #548]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_RCC_OscConfig+0x62>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e3a2      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	4b82      	ldr	r3, [pc, #520]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_RCC_OscConfig+0x7c>
 800326e:	4b7f      	ldr	r3, [pc, #508]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003276:	e005      	b.n	8003284 <HAL_RCC_OscConfig+0x88>
 8003278:	4b7c      	ldr	r3, [pc, #496]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800327a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003284:	4293      	cmp	r3, r2
 8003286:	d223      	bcs.n	80032d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fd55 	bl	8003d3c <RCC_SetFlashLatencyFromMSIRange>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e383      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329c:	4b73      	ldr	r3, [pc, #460]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a72      	ldr	r2, [pc, #456]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032a2:	f043 0308 	orr.w	r3, r3, #8
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b70      	ldr	r3, [pc, #448]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	496d      	ldr	r1, [pc, #436]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ba:	4b6c      	ldr	r3, [pc, #432]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	4968      	ldr	r1, [pc, #416]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]
 80032ce:	e025      	b.n	800331c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d0:	4b66      	ldr	r3, [pc, #408]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a65      	ldr	r2, [pc, #404]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032d6:	f043 0308 	orr.w	r3, r3, #8
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b63      	ldr	r3, [pc, #396]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4960      	ldr	r1, [pc, #384]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ee:	4b5f      	ldr	r3, [pc, #380]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	495b      	ldr	r1, [pc, #364]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fd15 	bl	8003d3c <RCC_SetFlashLatencyFromMSIRange>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e343      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800331c:	f000 fc4a 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b52      	ldr	r3, [pc, #328]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	4950      	ldr	r1, [pc, #320]	; (8003470 <HAL_RCC_OscConfig+0x274>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	4a4e      	ldr	r2, [pc, #312]	; (8003474 <HAL_RCC_OscConfig+0x278>)
 800333a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800333c:	4b4e      	ldr	r3, [pc, #312]	; (8003478 <HAL_RCC_OscConfig+0x27c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe fe95 	bl	8002070 <HAL_InitTick>
 8003346:	4603      	mov	r3, r0
 8003348:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d052      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	e327      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d032      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800335c:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a42      	ldr	r2, [pc, #264]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003368:	f7fe fed2 	bl	8002110 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003370:	f7fe fece 	bl	8002110 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e310      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003382:	4b3a      	ldr	r3, [pc, #232]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a36      	ldr	r2, [pc, #216]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4931      	ldr	r1, [pc, #196]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ac:	4b2f      	ldr	r3, [pc, #188]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	492c      	ldr	r1, [pc, #176]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	e01a      	b.n	80033f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033c2:	4b2a      	ldr	r3, [pc, #168]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a29      	ldr	r2, [pc, #164]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fe9f 	bl	8002110 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033d6:	f7fe fe9b 	bl	8002110 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e2dd      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033e8:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x1da>
 80033f4:	e000      	b.n	80033f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d074      	beq.n	80034ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b08      	cmp	r3, #8
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x21a>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b0c      	cmp	r3, #12
 800340e:	d10e      	bne.n	800342e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d10b      	bne.n	800342e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d064      	beq.n	80034ec <HAL_RCC_OscConfig+0x2f0>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d160      	bne.n	80034ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e2ba      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x24a>
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0b      	ldr	r2, [pc, #44]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e026      	b.n	8003494 <HAL_RCC_OscConfig+0x298>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344e:	d115      	bne.n	800347c <HAL_RCC_OscConfig+0x280>
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a05      	ldr	r2, [pc, #20]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a02      	ldr	r2, [pc, #8]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	e014      	b.n	8003494 <HAL_RCC_OscConfig+0x298>
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	080075cc 	.word	0x080075cc
 8003474:	20000010 	.word	0x20000010
 8003478:	20000014 	.word	0x20000014
 800347c:	4ba0      	ldr	r3, [pc, #640]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a9f      	ldr	r2, [pc, #636]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b9d      	ldr	r3, [pc, #628]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a9c      	ldr	r2, [pc, #624]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe fe38 	bl	8002110 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe fe34 	bl	8002110 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e276      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b6:	4b92      	ldr	r3, [pc, #584]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x2a8>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe fe24 	bl	8002110 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fe fe20 	bl	8002110 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e262      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x2d0>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d060      	beq.n	80035bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d005      	beq.n	800350c <HAL_RCC_OscConfig+0x310>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d119      	bne.n	800353a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d116      	bne.n	800353a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800350c:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_OscConfig+0x328>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e23f      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	4973      	ldr	r1, [pc, #460]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003538:	e040      	b.n	80035bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d023      	beq.n	800358a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003542:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fe fddf 	bl	8002110 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003556:	f7fe fddb 	bl	8002110 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e21d      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003568:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b62      	ldr	r3, [pc, #392]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	495f      	ldr	r1, [pc, #380]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
 8003588:	e018      	b.n	80035bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a5c      	ldr	r2, [pc, #368]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fe fdbb 	bl	8002110 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359e:	f7fe fdb7 	bl	8002110 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e1f9      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035b0:	4b53      	ldr	r3, [pc, #332]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03c      	beq.n	8003642 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d0:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	4a4a      	ldr	r2, [pc, #296]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe fd96 	bl	8002110 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e8:	f7fe fd92 	bl	8002110 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1d4      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCC_OscConfig+0x3ec>
 8003608:	e01b      	b.n	8003642 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360a:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800360c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003610:	4a3b      	ldr	r2, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fe fd79 	bl	8002110 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe fd75 	bl	8002110 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1b7      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003634:	4b32      	ldr	r3, [pc, #200]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80a6 	beq.w	800379c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003654:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6593      	str	r3, [r2, #88]	; 0x58
 800366c:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003678:	2301      	movs	r3, #1
 800367a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d118      	bne.n	80036ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003694:	f7fe fd3c 	bl	8002110 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369c:	f7fe fd38 	bl	8002110 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e17a      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d108      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4d8>
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036d2:	e029      	b.n	8003728 <HAL_RCC_OscConfig+0x52c>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d115      	bne.n	8003708 <HAL_RCC_OscConfig+0x50c>
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	4a03      	ldr	r2, [pc, #12]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x52c>
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	40007000 	.word	0x40007000
 8003708:	4b9c      	ldr	r3, [pc, #624]	; (800397c <HAL_RCC_OscConfig+0x780>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	4a9b      	ldr	r2, [pc, #620]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003718:	4b98      	ldr	r3, [pc, #608]	; (800397c <HAL_RCC_OscConfig+0x780>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	4a97      	ldr	r2, [pc, #604]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003720:	f023 0304 	bic.w	r3, r3, #4
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d016      	beq.n	800375e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fe fcee 	bl	8002110 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fe fcea 	bl	8002110 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e12a      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374e:	4b8b      	ldr	r3, [pc, #556]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ed      	beq.n	8003738 <HAL_RCC_OscConfig+0x53c>
 800375c:	e015      	b.n	800378a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fe fcd7 	bl	8002110 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe fcd3 	bl	8002110 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e113      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800377c:	4b7f      	ldr	r3, [pc, #508]	; (800397c <HAL_RCC_OscConfig+0x780>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ed      	bne.n	8003766 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003790:	4b7a      	ldr	r3, [pc, #488]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	4a79      	ldr	r2, [pc, #484]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80fe 	beq.w	80039a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	f040 80d0 	bne.w	8003950 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037b0:	4b72      	ldr	r3, [pc, #456]	; (800397c <HAL_RCC_OscConfig+0x780>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 0203 	and.w	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d130      	bne.n	8003826 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	3b01      	subs	r3, #1
 80037d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d127      	bne.n	8003826 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d11f      	bne.n	8003826 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037f0:	2a07      	cmp	r2, #7
 80037f2:	bf14      	ite	ne
 80037f4:	2201      	movne	r2, #1
 80037f6:	2200      	moveq	r2, #0
 80037f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d113      	bne.n	8003826 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	3b01      	subs	r3, #1
 800380c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d109      	bne.n	8003826 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	085b      	lsrs	r3, r3, #1
 800381e:	3b01      	subs	r3, #1
 8003820:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d06e      	beq.n	8003904 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d069      	beq.n	8003900 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800382c:	4b53      	ldr	r3, [pc, #332]	; (800397c <HAL_RCC_OscConfig+0x780>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003838:	4b50      	ldr	r3, [pc, #320]	; (800397c <HAL_RCC_OscConfig+0x780>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0ad      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003848:	4b4c      	ldr	r3, [pc, #304]	; (800397c <HAL_RCC_OscConfig+0x780>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a4b      	ldr	r2, [pc, #300]	; (800397c <HAL_RCC_OscConfig+0x780>)
 800384e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003852:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003854:	f7fe fc5c 	bl	8002110 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385c:	f7fe fc58 	bl	8002110 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e09a      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386e:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800387a:	4b40      	ldr	r3, [pc, #256]	; (800397c <HAL_RCC_OscConfig+0x780>)
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	4b40      	ldr	r3, [pc, #256]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800388a:	3a01      	subs	r2, #1
 800388c:	0112      	lsls	r2, r2, #4
 800388e:	4311      	orrs	r1, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003894:	0212      	lsls	r2, r2, #8
 8003896:	4311      	orrs	r1, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800389c:	0852      	lsrs	r2, r2, #1
 800389e:	3a01      	subs	r2, #1
 80038a0:	0552      	lsls	r2, r2, #21
 80038a2:	4311      	orrs	r1, r2
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038a8:	0852      	lsrs	r2, r2, #1
 80038aa:	3a01      	subs	r2, #1
 80038ac:	0652      	lsls	r2, r2, #25
 80038ae:	4311      	orrs	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038b4:	0912      	lsrs	r2, r2, #4
 80038b6:	0452      	lsls	r2, r2, #17
 80038b8:	430a      	orrs	r2, r1
 80038ba:	4930      	ldr	r1, [pc, #192]	; (800397c <HAL_RCC_OscConfig+0x780>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038c0:	4b2e      	ldr	r3, [pc, #184]	; (800397c <HAL_RCC_OscConfig+0x780>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2d      	ldr	r2, [pc, #180]	; (800397c <HAL_RCC_OscConfig+0x780>)
 80038c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_OscConfig+0x780>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	; (800397c <HAL_RCC_OscConfig+0x780>)
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038d8:	f7fe fc1a 	bl	8002110 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe fc16 	bl	8002110 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e058      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f2:	4b22      	ldr	r3, [pc, #136]	; (800397c <HAL_RCC_OscConfig+0x780>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038fe:	e050      	b.n	80039a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e04f      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d148      	bne.n	80039a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <HAL_RCC_OscConfig+0x780>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a16      	ldr	r2, [pc, #88]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003926:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003928:	f7fe fbf2 	bl	8002110 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fe fbee 	bl	8002110 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e030      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0x734>
 800394e:	e028      	b.n	80039a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d023      	beq.n	800399e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_OscConfig+0x780>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <HAL_RCC_OscConfig+0x780>)
 800395c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fe fbd5 	bl	8002110 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003968:	e00c      	b.n	8003984 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396a:	f7fe fbd1 	bl	8002110 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d905      	bls.n	8003984 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e013      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
 800397c:	40021000 	.word	0x40021000
 8003980:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_RCC_OscConfig+0x7b0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ec      	bne.n	800396a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCC_OscConfig+0x7b0>)
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	4905      	ldr	r1, [pc, #20]	; (80039ac <HAL_RCC_OscConfig+0x7b0>)
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_RCC_OscConfig+0x7b4>)
 8003998:	4013      	ands	r3, r2
 800399a:	60cb      	str	r3, [r1, #12]
 800399c:	e001      	b.n	80039a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3720      	adds	r7, #32
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	feeefffc 	.word	0xfeeefffc

080039b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0e7      	b.n	8003b98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b75      	ldr	r3, [pc, #468]	; (8003ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b72      	ldr	r3, [pc, #456]	; (8003ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 0207 	bic.w	r2, r3, #7
 80039de:	4970      	ldr	r1, [pc, #448]	; (8003ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b6e      	ldr	r3, [pc, #440]	; (8003ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0cf      	b.n	8003b98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d010      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	4b66      	ldr	r3, [pc, #408]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d908      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a14:	4b63      	ldr	r3, [pc, #396]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4960      	ldr	r1, [pc, #384]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d04c      	beq.n	8003acc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3a:	4b5a      	ldr	r3, [pc, #360]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d121      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e0a6      	b.n	8003b98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a52:	4b54      	ldr	r3, [pc, #336]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d115      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e09a      	b.n	8003b98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e08e      	b.n	8003b98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e086      	b.n	8003b98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a8a:	4b46      	ldr	r3, [pc, #280]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4943      	ldr	r1, [pc, #268]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fe fb38 	bl	8002110 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fe fb34 	bl	8002110 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e06e      	b.n	8003b98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	4b3a      	ldr	r3, [pc, #232]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 020c 	and.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1eb      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d010      	beq.n	8003afa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d208      	bcs.n	8003afa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	492b      	ldr	r1, [pc, #172]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003afa:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d210      	bcs.n	8003b2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 0207 	bic.w	r2, r3, #7
 8003b10:	4923      	ldr	r1, [pc, #140]	; (8003ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b18:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e036      	b.n	8003b98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b36:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	4918      	ldr	r1, [pc, #96]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b54:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4910      	ldr	r1, [pc, #64]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b68:	f000 f824 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	490b      	ldr	r1, [pc, #44]	; (8003ba8 <HAL_RCC_ClockConfig+0x1f4>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
 8003b84:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1f8>)
 8003b86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1fc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe fa6f 	bl	8002070 <HAL_InitTick>
 8003b92:	4603      	mov	r3, r0
 8003b94:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b96:	7afb      	ldrb	r3, [r7, #11]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40022000 	.word	0x40022000
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	080075cc 	.word	0x080075cc
 8003bac:	20000010 	.word	0x20000010
 8003bb0:	20000014 	.word	0x20000014

08003bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc2:	4b3e      	ldr	r3, [pc, #248]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d121      	bne.n	8003c26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d11e      	bne.n	8003c26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003be8:	4b34      	ldr	r3, [pc, #208]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bf4:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	e005      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c04:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c10:	4a2b      	ldr	r2, [pc, #172]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10d      	bne.n	8003c3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d102      	bne.n	8003c32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	e004      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c38:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	d134      	bne.n	8003cac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d003      	beq.n	8003c5a <HAL_RCC_GetSysClockFreq+0xa6>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d003      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0xac>
 8003c58:	e005      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c5a:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c5c:	617b      	str	r3, [r7, #20]
      break;
 8003c5e:	e005      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c62:	617b      	str	r3, [r7, #20]
      break;
 8003c64:	e002      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	617b      	str	r3, [r7, #20]
      break;
 8003c6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c6c:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	3301      	adds	r3, #1
 8003c78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	fb03 f202 	mul.w	r2, r3, r2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	0e5b      	lsrs	r3, r3, #25
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cac:	69bb      	ldr	r3, [r7, #24]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3724      	adds	r7, #36	; 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	080075e4 	.word	0x080075e4
 8003cc4:	00f42400 	.word	0x00f42400
 8003cc8:	007a1200 	.word	0x007a1200

08003ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000010 	.word	0x20000010

08003ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ce8:	f7ff fff0 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4904      	ldr	r1, [pc, #16]	; (8003d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	080075dc 	.word	0x080075dc

08003d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d14:	f7ff ffda 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0adb      	lsrs	r3, r3, #11
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4904      	ldr	r1, [pc, #16]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	080075dc 	.word	0x080075dc

08003d3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d48:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d54:	f7ff f9ee 	bl	8003134 <HAL_PWREx_GetVoltageRange>
 8003d58:	6178      	str	r0, [r7, #20]
 8003d5a:	e014      	b.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d5c:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	4a24      	ldr	r2, [pc, #144]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6593      	str	r3, [r2, #88]	; 0x58
 8003d68:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d74:	f7ff f9de 	bl	8003134 <HAL_PWREx_GetVoltageRange>
 8003d78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d8c:	d10b      	bne.n	8003da6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d919      	bls.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2ba0      	cmp	r3, #160	; 0xa0
 8003d98:	d902      	bls.n	8003da0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e013      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da0:	2301      	movs	r3, #1
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	e010      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d902      	bls.n	8003db2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003dac:	2303      	movs	r3, #3
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	e00a      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b80      	cmp	r3, #128	; 0x80
 8003db6:	d102      	bne.n	8003dbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003db8:	2302      	movs	r3, #2
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e004      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b70      	cmp	r3, #112	; 0x70
 8003dc2:	d101      	bne.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 0207 	bic.w	r2, r3, #7
 8003dd0:	4909      	ldr	r1, [pc, #36]	; (8003df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dd8:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d001      	beq.n	8003dea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40022000 	.word	0x40022000

08003dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e04:	2300      	movs	r3, #0
 8003e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e08:	2300      	movs	r3, #0
 8003e0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d041      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e20:	d02a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e26:	d824      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e2c:	d008      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e32:	d81e      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3c:	d010      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e3e:	e018      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e40:	4b86      	ldr	r3, [pc, #536]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a85      	ldr	r2, [pc, #532]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e4c:	e015      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3304      	adds	r3, #4
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fabb 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e5e:	e00c      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3320      	adds	r3, #32
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fba6 	bl	80045b8 <RCCEx_PLLSAI2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	74fb      	strb	r3, [r7, #19]
      break;
 8003e76:	e000      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e80:	4b76      	ldr	r3, [pc, #472]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8e:	4973      	ldr	r1, [pc, #460]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e96:	e001      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d041      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003eb0:	d02a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003eb6:	d824      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ec2:	d81e      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ecc:	d010      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ece:	e018      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ed0:	4b62      	ldr	r3, [pc, #392]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4a61      	ldr	r2, [pc, #388]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003edc:	e015      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fa73 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eee:	e00c      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3320      	adds	r3, #32
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fb5e 	bl	80045b8 <RCCEx_PLLSAI2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f00:	e003      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	74fb      	strb	r3, [r7, #19]
      break;
 8003f06:	e000      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f10:	4b52      	ldr	r3, [pc, #328]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f1e:	494f      	ldr	r1, [pc, #316]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f26:	e001      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80a0 	beq.w	800407a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f54:	4b41      	ldr	r3, [pc, #260]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	4a40      	ldr	r2, [pc, #256]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f60:	4b3e      	ldr	r3, [pc, #248]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f70:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3a      	ldr	r2, [pc, #232]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f7c:	f7fe f8c8 	bl	8002110 <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f82:	e009      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f84:	f7fe f8c4 	bl	8002110 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d902      	bls.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	74fb      	strb	r3, [r7, #19]
        break;
 8003f96:	e005      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f98:	4b31      	ldr	r3, [pc, #196]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ef      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d15c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003faa:	4b2c      	ldr	r3, [pc, #176]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01f      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d019      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fc8:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fd4:	4b21      	ldr	r3, [pc, #132]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	4a20      	ldr	r2, [pc, #128]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe4:	4b1d      	ldr	r3, [pc, #116]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ff4:	4a19      	ldr	r2, [pc, #100]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d016      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004006:	f7fe f883 	bl	8002110 <HAL_GetTick>
 800400a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800400c:	e00b      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fe f87f 	bl	8002110 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d902      	bls.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	74fb      	strb	r3, [r7, #19]
            break;
 8004024:	e006      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004026:	4b0d      	ldr	r3, [pc, #52]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ec      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404a:	4904      	ldr	r1, [pc, #16]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004052:	e009      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	74bb      	strb	r3, [r7, #18]
 8004058:	e006      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000
 8004060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004068:	7c7b      	ldrb	r3, [r7, #17]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d105      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406e:	4b9e      	ldr	r3, [pc, #632]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	4a9d      	ldr	r2, [pc, #628]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004078:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004086:	4b98      	ldr	r3, [pc, #608]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408c:	f023 0203 	bic.w	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	4994      	ldr	r1, [pc, #592]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040a8:	4b8f      	ldr	r3, [pc, #572]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	f023 020c 	bic.w	r2, r3, #12
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	498c      	ldr	r1, [pc, #560]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ca:	4b87      	ldr	r3, [pc, #540]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	4983      	ldr	r1, [pc, #524]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040ec:	4b7e      	ldr	r3, [pc, #504]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	497b      	ldr	r1, [pc, #492]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800410e:	4b76      	ldr	r3, [pc, #472]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411c:	4972      	ldr	r1, [pc, #456]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004130:	4b6d      	ldr	r3, [pc, #436]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	496a      	ldr	r1, [pc, #424]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004152:	4b65      	ldr	r3, [pc, #404]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	4961      	ldr	r1, [pc, #388]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004174:	4b5c      	ldr	r3, [pc, #368]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004182:	4959      	ldr	r1, [pc, #356]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004196:	4b54      	ldr	r3, [pc, #336]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a4:	4950      	ldr	r1, [pc, #320]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041b8:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	4948      	ldr	r1, [pc, #288]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041da:	4b43      	ldr	r3, [pc, #268]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	493f      	ldr	r1, [pc, #252]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d028      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041fc:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420a:	4937      	ldr	r1, [pc, #220]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800421a:	d106      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800421c:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004226:	60d3      	str	r3, [r2, #12]
 8004228:	e011      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004232:	d10c      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f8c8 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800424a:	7cfb      	ldrb	r3, [r7, #19]
 800424c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d028      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800425a:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	491f      	ldr	r1, [pc, #124]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004278:	d106      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427a:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	4a1a      	ldr	r2, [pc, #104]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004284:	60d3      	str	r3, [r2, #12]
 8004286:	e011      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004290:	d10c      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3304      	adds	r3, #4
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f899 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d02b      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c6:	4908      	ldr	r1, [pc, #32]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d6:	d109      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a02      	ldr	r2, [pc, #8]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e2:	60d3      	str	r3, [r2, #12]
 80042e4:	e014      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f4:	d10c      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3304      	adds	r3, #4
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f867 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02f      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800431c:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800432a:	4928      	ldr	r1, [pc, #160]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800433a:	d10d      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	2102      	movs	r1, #2
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f844 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d014      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	74bb      	strb	r3, [r7, #18]
 8004356:	e011      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800435c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004360:	d10c      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3320      	adds	r3, #32
 8004366:	2102      	movs	r1, #2
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f925 	bl	80045b8 <RCCEx_PLLSAI2_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004372:	7cfb      	ldrb	r3, [r7, #19]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004388:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004396:	490d      	ldr	r1, [pc, #52]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ba:	4904      	ldr	r1, [pc, #16]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40021000 	.word	0x40021000

080043d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043de:	4b75      	ldr	r3, [pc, #468]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d018      	beq.n	800441c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ea:	4b72      	ldr	r3, [pc, #456]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0203 	and.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d10d      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
       ||
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004402:	4b6c      	ldr	r3, [pc, #432]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
       ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d047      	beq.n	80044a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	e044      	b.n	80044a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d018      	beq.n	8004456 <RCCEx_PLLSAI1_Config+0x86>
 8004424:	2b03      	cmp	r3, #3
 8004426:	d825      	bhi.n	8004474 <RCCEx_PLLSAI1_Config+0xa4>
 8004428:	2b01      	cmp	r3, #1
 800442a:	d002      	beq.n	8004432 <RCCEx_PLLSAI1_Config+0x62>
 800442c:	2b02      	cmp	r3, #2
 800442e:	d009      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0x74>
 8004430:	e020      	b.n	8004474 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004432:	4b60      	ldr	r3, [pc, #384]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d11d      	bne.n	800447a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004442:	e01a      	b.n	800447a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004444:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d116      	bne.n	800447e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004454:	e013      	b.n	800447e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004456:	4b57      	ldr	r3, [pc, #348]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004462:	4b54      	ldr	r3, [pc, #336]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004472:	e006      	b.n	8004482 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e004      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800447a:	bf00      	nop
 800447c:	e002      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004482:	bf00      	nop
    }

    if(status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10d      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800448a:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	430b      	orrs	r3, r1
 80044a0:	4944      	ldr	r1, [pc, #272]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d17d      	bne.n	80045a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044ac:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a40      	ldr	r2, [pc, #256]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fd fe2a 	bl	8002110 <HAL_GetTick>
 80044bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044be:	e009      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c0:	f7fd fe26 	bl	8002110 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d902      	bls.n	80044d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	73fb      	strb	r3, [r7, #15]
        break;
 80044d2:	e005      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044d4:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ef      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d160      	bne.n	80045a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d111      	bne.n	8004510 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ec:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
 80044fc:	0211      	lsls	r1, r2, #8
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68d2      	ldr	r2, [r2, #12]
 8004502:	0912      	lsrs	r2, r2, #4
 8004504:	0452      	lsls	r2, r2, #17
 8004506:	430a      	orrs	r2, r1
 8004508:	492a      	ldr	r1, [pc, #168]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450a:	4313      	orrs	r3, r2
 800450c:	610b      	str	r3, [r1, #16]
 800450e:	e027      	b.n	8004560 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d112      	bne.n	800453c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004516:	4b27      	ldr	r3, [pc, #156]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800451e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6892      	ldr	r2, [r2, #8]
 8004526:	0211      	lsls	r1, r2, #8
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6912      	ldr	r2, [r2, #16]
 800452c:	0852      	lsrs	r2, r2, #1
 800452e:	3a01      	subs	r2, #1
 8004530:	0552      	lsls	r2, r2, #21
 8004532:	430a      	orrs	r2, r1
 8004534:	491f      	ldr	r1, [pc, #124]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004536:	4313      	orrs	r3, r2
 8004538:	610b      	str	r3, [r1, #16]
 800453a:	e011      	b.n	8004560 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453c:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004544:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6892      	ldr	r2, [r2, #8]
 800454c:	0211      	lsls	r1, r2, #8
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6952      	ldr	r2, [r2, #20]
 8004552:	0852      	lsrs	r2, r2, #1
 8004554:	3a01      	subs	r2, #1
 8004556:	0652      	lsls	r2, r2, #25
 8004558:	430a      	orrs	r2, r1
 800455a:	4916      	ldr	r1, [pc, #88]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455c:	4313      	orrs	r3, r2
 800455e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004560:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004566:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800456a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fd fdd0 	bl	8002110 <HAL_GetTick>
 8004570:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004572:	e009      	b.n	8004588 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004574:	f7fd fdcc 	bl	8002110 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d902      	bls.n	8004588 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	73fb      	strb	r3, [r7, #15]
          break;
 8004586:	e005      	b.n	8004594 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ef      	beq.n	8004574 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	4904      	ldr	r1, [pc, #16]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000

080045b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045c6:	4b6a      	ldr	r3, [pc, #424]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d018      	beq.n	8004604 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045d2:	4b67      	ldr	r3, [pc, #412]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f003 0203 	and.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d10d      	bne.n	80045fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
       ||
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045ea:	4b61      	ldr	r3, [pc, #388]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
       ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d047      	beq.n	800468e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	e044      	b.n	800468e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d018      	beq.n	800463e <RCCEx_PLLSAI2_Config+0x86>
 800460c:	2b03      	cmp	r3, #3
 800460e:	d825      	bhi.n	800465c <RCCEx_PLLSAI2_Config+0xa4>
 8004610:	2b01      	cmp	r3, #1
 8004612:	d002      	beq.n	800461a <RCCEx_PLLSAI2_Config+0x62>
 8004614:	2b02      	cmp	r3, #2
 8004616:	d009      	beq.n	800462c <RCCEx_PLLSAI2_Config+0x74>
 8004618:	e020      	b.n	800465c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800461a:	4b55      	ldr	r3, [pc, #340]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d11d      	bne.n	8004662 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800462a:	e01a      	b.n	8004662 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800462c:	4b50      	ldr	r3, [pc, #320]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004634:	2b00      	cmp	r3, #0
 8004636:	d116      	bne.n	8004666 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800463c:	e013      	b.n	8004666 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800463e:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10f      	bne.n	800466a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800464a:	4b49      	ldr	r3, [pc, #292]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800465a:	e006      	b.n	800466a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e004      	b.n	800466c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004662:	bf00      	nop
 8004664:	e002      	b.n	800466c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800466a:	bf00      	nop
    }

    if(status == HAL_OK)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10d      	bne.n	800468e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004672:	4b3f      	ldr	r3, [pc, #252]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6819      	ldr	r1, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	3b01      	subs	r3, #1
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	430b      	orrs	r3, r1
 8004688:	4939      	ldr	r1, [pc, #228]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d167      	bne.n	8004764 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004694:	4b36      	ldr	r3, [pc, #216]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a35      	ldr	r2, [pc, #212]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800469e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a0:	f7fd fd36 	bl	8002110 <HAL_GetTick>
 80046a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046a6:	e009      	b.n	80046bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046a8:	f7fd fd32 	bl	8002110 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d902      	bls.n	80046bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	73fb      	strb	r3, [r7, #15]
        break;
 80046ba:	e005      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046bc:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1ef      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d14a      	bne.n	8004764 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d111      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046d4:	4b26      	ldr	r3, [pc, #152]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6892      	ldr	r2, [r2, #8]
 80046e4:	0211      	lsls	r1, r2, #8
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68d2      	ldr	r2, [r2, #12]
 80046ea:	0912      	lsrs	r2, r2, #4
 80046ec:	0452      	lsls	r2, r2, #17
 80046ee:	430a      	orrs	r2, r1
 80046f0:	491f      	ldr	r1, [pc, #124]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	614b      	str	r3, [r1, #20]
 80046f6:	e011      	b.n	800471c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004700:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6892      	ldr	r2, [r2, #8]
 8004708:	0211      	lsls	r1, r2, #8
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6912      	ldr	r2, [r2, #16]
 800470e:	0852      	lsrs	r2, r2, #1
 8004710:	3a01      	subs	r2, #1
 8004712:	0652      	lsls	r2, r2, #25
 8004714:	430a      	orrs	r2, r1
 8004716:	4916      	ldr	r1, [pc, #88]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004718:	4313      	orrs	r3, r2
 800471a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a13      	ldr	r2, [pc, #76]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004726:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004728:	f7fd fcf2 	bl	8002110 <HAL_GetTick>
 800472c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800472e:	e009      	b.n	8004744 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004730:	f7fd fcee 	bl	8002110 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d902      	bls.n	8004744 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	73fb      	strb	r3, [r7, #15]
          break;
 8004742:	e005      	b.n	8004750 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0ef      	beq.n	8004730 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	4904      	ldr	r1, [pc, #16]	; (8004770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004760:	4313      	orrs	r3, r2
 8004762:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000

08004774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e049      	b.n	800481a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fd fb30 	bl	8001e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f000 f968 	bl	8004a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d001      	beq.n	800483c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e047      	b.n	80048cc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a23      	ldr	r2, [pc, #140]	; (80048d8 <HAL_TIM_Base_Start+0xb4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01d      	beq.n	800488a <HAL_TIM_Base_Start+0x66>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d018      	beq.n	800488a <HAL_TIM_Base_Start+0x66>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <HAL_TIM_Base_Start+0xb8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_TIM_Base_Start+0x66>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1e      	ldr	r2, [pc, #120]	; (80048e0 <HAL_TIM_Base_Start+0xbc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_TIM_Base_Start+0x66>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <HAL_TIM_Base_Start+0xc0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_TIM_Base_Start+0x66>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <HAL_TIM_Base_Start+0xc4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_TIM_Base_Start+0x66>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a19      	ldr	r2, [pc, #100]	; (80048ec <HAL_TIM_Base_Start+0xc8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d115      	bne.n	80048b6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <HAL_TIM_Base_Start+0xcc>)
 8004892:	4013      	ands	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b06      	cmp	r3, #6
 800489a:	d015      	beq.n	80048c8 <HAL_TIM_Base_Start+0xa4>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a2:	d011      	beq.n	80048c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	e008      	b.n	80048c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0201 	orr.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e000      	b.n	80048ca <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40013400 	.word	0x40013400
 80048ec:	40014000 	.word	0x40014000
 80048f0:	00010007 	.word	0x00010007

080048f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_TIM_ConfigClockSource+0x1c>
 800490c:	2302      	movs	r3, #2
 800490e:	e0b6      	b.n	8004a7e <HAL_TIM_ConfigClockSource+0x18a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800493a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494c:	d03e      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0xd8>
 800494e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004952:	f200 8087 	bhi.w	8004a64 <HAL_TIM_ConfigClockSource+0x170>
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495a:	f000 8086 	beq.w	8004a6a <HAL_TIM_ConfigClockSource+0x176>
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004962:	d87f      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x170>
 8004964:	2b70      	cmp	r3, #112	; 0x70
 8004966:	d01a      	beq.n	800499e <HAL_TIM_ConfigClockSource+0xaa>
 8004968:	2b70      	cmp	r3, #112	; 0x70
 800496a:	d87b      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x170>
 800496c:	2b60      	cmp	r3, #96	; 0x60
 800496e:	d050      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x11e>
 8004970:	2b60      	cmp	r3, #96	; 0x60
 8004972:	d877      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x170>
 8004974:	2b50      	cmp	r3, #80	; 0x50
 8004976:	d03c      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0xfe>
 8004978:	2b50      	cmp	r3, #80	; 0x50
 800497a:	d873      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x170>
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d058      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x13e>
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d86f      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x170>
 8004984:	2b30      	cmp	r3, #48	; 0x30
 8004986:	d064      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
 8004988:	2b30      	cmp	r3, #48	; 0x30
 800498a:	d86b      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x170>
 800498c:	2b20      	cmp	r3, #32
 800498e:	d060      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d867      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x170>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d05c      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
 8004998:	2b10      	cmp	r3, #16
 800499a:	d05a      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
 800499c:	e062      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f000 f97f 	bl	8004cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	609a      	str	r2, [r3, #8]
      break;
 80049ca:	e04f      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6899      	ldr	r1, [r3, #8]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f000 f968 	bl	8004cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ee:	609a      	str	r2, [r3, #8]
      break;
 80049f0:	e03c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6859      	ldr	r1, [r3, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f000 f8dc 	bl	8004bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2150      	movs	r1, #80	; 0x50
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f935 	bl	8004c7a <TIM_ITRx_SetConfig>
      break;
 8004a10:	e02c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f000 f8fb 	bl	8004c1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2160      	movs	r1, #96	; 0x60
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f925 	bl	8004c7a <TIM_ITRx_SetConfig>
      break;
 8004a30:	e01c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f000 f8bc 	bl	8004bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2140      	movs	r1, #64	; 0x40
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f915 	bl	8004c7a <TIM_ITRx_SetConfig>
      break;
 8004a50:	e00c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f000 f90c 	bl	8004c7a <TIM_ITRx_SetConfig>
      break;
 8004a62:	e003      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      break;
 8004a68:	e000      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a40      	ldr	r2, [pc, #256]	; (8004b9c <TIM_Base_SetConfig+0x114>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa6:	d00f      	beq.n	8004ac8 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a3d      	ldr	r2, [pc, #244]	; (8004ba0 <TIM_Base_SetConfig+0x118>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00b      	beq.n	8004ac8 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a3c      	ldr	r2, [pc, #240]	; (8004ba4 <TIM_Base_SetConfig+0x11c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d007      	beq.n	8004ac8 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a3b      	ldr	r2, [pc, #236]	; (8004ba8 <TIM_Base_SetConfig+0x120>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_Base_SetConfig+0x40>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a3a      	ldr	r2, [pc, #232]	; (8004bac <TIM_Base_SetConfig+0x124>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d108      	bne.n	8004ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a2f      	ldr	r2, [pc, #188]	; (8004b9c <TIM_Base_SetConfig+0x114>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01f      	beq.n	8004b22 <TIM_Base_SetConfig+0x9a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae8:	d01b      	beq.n	8004b22 <TIM_Base_SetConfig+0x9a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <TIM_Base_SetConfig+0x118>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d017      	beq.n	8004b22 <TIM_Base_SetConfig+0x9a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a2b      	ldr	r2, [pc, #172]	; (8004ba4 <TIM_Base_SetConfig+0x11c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <TIM_Base_SetConfig+0x9a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2a      	ldr	r2, [pc, #168]	; (8004ba8 <TIM_Base_SetConfig+0x120>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00f      	beq.n	8004b22 <TIM_Base_SetConfig+0x9a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a29      	ldr	r2, [pc, #164]	; (8004bac <TIM_Base_SetConfig+0x124>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00b      	beq.n	8004b22 <TIM_Base_SetConfig+0x9a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a28      	ldr	r2, [pc, #160]	; (8004bb0 <TIM_Base_SetConfig+0x128>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d007      	beq.n	8004b22 <TIM_Base_SetConfig+0x9a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a27      	ldr	r2, [pc, #156]	; (8004bb4 <TIM_Base_SetConfig+0x12c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d003      	beq.n	8004b22 <TIM_Base_SetConfig+0x9a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <TIM_Base_SetConfig+0x130>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d108      	bne.n	8004b34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <TIM_Base_SetConfig+0x114>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0xf8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a12      	ldr	r2, [pc, #72]	; (8004bac <TIM_Base_SetConfig+0x124>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0xf8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <TIM_Base_SetConfig+0x128>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0xf8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a10      	ldr	r2, [pc, #64]	; (8004bb4 <TIM_Base_SetConfig+0x12c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0xf8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a0f      	ldr	r2, [pc, #60]	; (8004bb8 <TIM_Base_SetConfig+0x130>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d103      	bne.n	8004b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	615a      	str	r2, [r3, #20]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40000800 	.word	0x40000800
 8004ba8:	40000c00 	.word	0x40000c00
 8004bac:	40013400 	.word	0x40013400
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40014400 	.word	0x40014400
 8004bb8:	40014800 	.word	0x40014800

08004bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f023 0201 	bic.w	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f023 030a 	bic.w	r3, r3, #10
 8004bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b087      	sub	sp, #28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0210 	bic.w	r2, r3, #16
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	031b      	lsls	r3, r3, #12
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f043 0307 	orr.w	r3, r3, #7
 8004c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	609a      	str	r2, [r3, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	021a      	lsls	r2, r3, #8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	609a      	str	r2, [r3, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	371c      	adds	r7, #28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e068      	b.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2e      	ldr	r2, [pc, #184]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2d      	ldr	r2, [pc, #180]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d108      	bne.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01d      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d018      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1a      	ldr	r2, [pc, #104]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a18      	ldr	r2, [pc, #96]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a13      	ldr	r2, [pc, #76]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10c      	bne.n	8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40013400 	.word	0x40013400
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	40000c00 	.word	0x40000c00
 8004dfc:	40014000 	.word	0x40014000

08004e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e040      	b.n	8004e94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd f80c 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2224      	movs	r2, #36	; 0x24
 8004e2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0201 	bic.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f82c 	bl	8004e9c <UART_SetConfig>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e022      	b.n	8004e94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fad8 	bl	800540c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fb5f 	bl	8005550 <UART_CheckIdleState>
 8004e92:	4603      	mov	r3, r0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea0:	b08a      	sub	sp, #40	; 0x28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4ba4      	ldr	r3, [pc, #656]	; (800515c <UART_SetConfig+0x2c0>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	6812      	ldr	r2, [r2, #0]
 8004ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a99      	ldr	r2, [pc, #612]	; (8005160 <UART_SetConfig+0x2c4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f04:	4313      	orrs	r3, r2
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a90      	ldr	r2, [pc, #576]	; (8005164 <UART_SetConfig+0x2c8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d126      	bne.n	8004f74 <UART_SetConfig+0xd8>
 8004f26:	4b90      	ldr	r3, [pc, #576]	; (8005168 <UART_SetConfig+0x2cc>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d81b      	bhi.n	8004f6c <UART_SetConfig+0xd0>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <UART_SetConfig+0xa0>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5d 	.word	0x08004f5d
 8004f44:	08004f55 	.word	0x08004f55
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f52:	e116      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f54:	2302      	movs	r3, #2
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e112      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f62:	e10e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f64:	2308      	movs	r3, #8
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e10a      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e106      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a7c      	ldr	r2, [pc, #496]	; (800516c <UART_SetConfig+0x2d0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d138      	bne.n	8004ff0 <UART_SetConfig+0x154>
 8004f7e:	4b7a      	ldr	r3, [pc, #488]	; (8005168 <UART_SetConfig+0x2cc>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d82d      	bhi.n	8004fe8 <UART_SetConfig+0x14c>
 8004f8c:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0xf8>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	08004fe9 	.word	0x08004fe9
 8004f9c:	08004fe9 	.word	0x08004fe9
 8004fa0:	08004fe9 	.word	0x08004fe9
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	08004fe9 	.word	0x08004fe9
 8004fac:	08004fe9 	.word	0x08004fe9
 8004fb0:	08004fe9 	.word	0x08004fe9
 8004fb4:	08004fd1 	.word	0x08004fd1
 8004fb8:	08004fe9 	.word	0x08004fe9
 8004fbc:	08004fe9 	.word	0x08004fe9
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fce:	e0d8      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd6:	e0d4      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fde:	e0d0      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e0cc      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e0c8      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a5e      	ldr	r2, [pc, #376]	; (8005170 <UART_SetConfig+0x2d4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d125      	bne.n	8005046 <UART_SetConfig+0x1aa>
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <UART_SetConfig+0x2cc>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005004:	2b30      	cmp	r3, #48	; 0x30
 8005006:	d016      	beq.n	8005036 <UART_SetConfig+0x19a>
 8005008:	2b30      	cmp	r3, #48	; 0x30
 800500a:	d818      	bhi.n	800503e <UART_SetConfig+0x1a2>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d00a      	beq.n	8005026 <UART_SetConfig+0x18a>
 8005010:	2b20      	cmp	r3, #32
 8005012:	d814      	bhi.n	800503e <UART_SetConfig+0x1a2>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <UART_SetConfig+0x182>
 8005018:	2b10      	cmp	r3, #16
 800501a:	d008      	beq.n	800502e <UART_SetConfig+0x192>
 800501c:	e00f      	b.n	800503e <UART_SetConfig+0x1a2>
 800501e:	2300      	movs	r3, #0
 8005020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005024:	e0ad      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005026:	2302      	movs	r3, #2
 8005028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502c:	e0a9      	b.n	8005182 <UART_SetConfig+0x2e6>
 800502e:	2304      	movs	r3, #4
 8005030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005034:	e0a5      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005036:	2308      	movs	r3, #8
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503c:	e0a1      	b.n	8005182 <UART_SetConfig+0x2e6>
 800503e:	2310      	movs	r3, #16
 8005040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005044:	e09d      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4a      	ldr	r2, [pc, #296]	; (8005174 <UART_SetConfig+0x2d8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d125      	bne.n	800509c <UART_SetConfig+0x200>
 8005050:	4b45      	ldr	r3, [pc, #276]	; (8005168 <UART_SetConfig+0x2cc>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800505a:	2bc0      	cmp	r3, #192	; 0xc0
 800505c:	d016      	beq.n	800508c <UART_SetConfig+0x1f0>
 800505e:	2bc0      	cmp	r3, #192	; 0xc0
 8005060:	d818      	bhi.n	8005094 <UART_SetConfig+0x1f8>
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d00a      	beq.n	800507c <UART_SetConfig+0x1e0>
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d814      	bhi.n	8005094 <UART_SetConfig+0x1f8>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <UART_SetConfig+0x1d8>
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d008      	beq.n	8005084 <UART_SetConfig+0x1e8>
 8005072:	e00f      	b.n	8005094 <UART_SetConfig+0x1f8>
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507a:	e082      	b.n	8005182 <UART_SetConfig+0x2e6>
 800507c:	2302      	movs	r3, #2
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005082:	e07e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005084:	2304      	movs	r3, #4
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508a:	e07a      	b.n	8005182 <UART_SetConfig+0x2e6>
 800508c:	2308      	movs	r3, #8
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005092:	e076      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005094:	2310      	movs	r3, #16
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e072      	b.n	8005182 <UART_SetConfig+0x2e6>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a35      	ldr	r2, [pc, #212]	; (8005178 <UART_SetConfig+0x2dc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d12a      	bne.n	80050fc <UART_SetConfig+0x260>
 80050a6:	4b30      	ldr	r3, [pc, #192]	; (8005168 <UART_SetConfig+0x2cc>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b4:	d01a      	beq.n	80050ec <UART_SetConfig+0x250>
 80050b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ba:	d81b      	bhi.n	80050f4 <UART_SetConfig+0x258>
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c0:	d00c      	beq.n	80050dc <UART_SetConfig+0x240>
 80050c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c6:	d815      	bhi.n	80050f4 <UART_SetConfig+0x258>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <UART_SetConfig+0x238>
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d0:	d008      	beq.n	80050e4 <UART_SetConfig+0x248>
 80050d2:	e00f      	b.n	80050f4 <UART_SetConfig+0x258>
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e052      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050dc:	2302      	movs	r3, #2
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e04e      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050e4:	2304      	movs	r3, #4
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	e04a      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050ec:	2308      	movs	r3, #8
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e046      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e042      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a17      	ldr	r2, [pc, #92]	; (8005160 <UART_SetConfig+0x2c4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d13a      	bne.n	800517c <UART_SetConfig+0x2e0>
 8005106:	4b18      	ldr	r3, [pc, #96]	; (8005168 <UART_SetConfig+0x2cc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005110:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005114:	d01a      	beq.n	800514c <UART_SetConfig+0x2b0>
 8005116:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800511a:	d81b      	bhi.n	8005154 <UART_SetConfig+0x2b8>
 800511c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005120:	d00c      	beq.n	800513c <UART_SetConfig+0x2a0>
 8005122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005126:	d815      	bhi.n	8005154 <UART_SetConfig+0x2b8>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <UART_SetConfig+0x298>
 800512c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005130:	d008      	beq.n	8005144 <UART_SetConfig+0x2a8>
 8005132:	e00f      	b.n	8005154 <UART_SetConfig+0x2b8>
 8005134:	2300      	movs	r3, #0
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513a:	e022      	b.n	8005182 <UART_SetConfig+0x2e6>
 800513c:	2302      	movs	r3, #2
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005142:	e01e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	e01a      	b.n	8005182 <UART_SetConfig+0x2e6>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e016      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e012      	b.n	8005182 <UART_SetConfig+0x2e6>
 800515c:	efff69f3 	.word	0xefff69f3
 8005160:	40008000 	.word	0x40008000
 8005164:	40013800 	.word	0x40013800
 8005168:	40021000 	.word	0x40021000
 800516c:	40004400 	.word	0x40004400
 8005170:	40004800 	.word	0x40004800
 8005174:	40004c00 	.word	0x40004c00
 8005178:	40005000 	.word	0x40005000
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a9f      	ldr	r2, [pc, #636]	; (8005404 <UART_SetConfig+0x568>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d17a      	bne.n	8005282 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800518c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005190:	2b08      	cmp	r3, #8
 8005192:	d824      	bhi.n	80051de <UART_SetConfig+0x342>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <UART_SetConfig+0x300>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051df 	.word	0x080051df
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051df 	.word	0x080051df
 80051ac:	080051cf 	.word	0x080051cf
 80051b0:	080051df 	.word	0x080051df
 80051b4:	080051df 	.word	0x080051df
 80051b8:	080051df 	.word	0x080051df
 80051bc:	080051d7 	.word	0x080051d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7fe fd90 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 80051c4:	61f8      	str	r0, [r7, #28]
        break;
 80051c6:	e010      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c8:	4b8f      	ldr	r3, [pc, #572]	; (8005408 <UART_SetConfig+0x56c>)
 80051ca:	61fb      	str	r3, [r7, #28]
        break;
 80051cc:	e00d      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ce:	f7fe fcf1 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 80051d2:	61f8      	str	r0, [r7, #28]
        break;
 80051d4:	e009      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051da:	61fb      	str	r3, [r7, #28]
        break;
 80051dc:	e005      	b.n	80051ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80fb 	beq.w	80053e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d305      	bcc.n	800520e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	429a      	cmp	r2, r3
 800520c:	d903      	bls.n	8005216 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005214:	e0e8      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2200      	movs	r2, #0
 800521a:	461c      	mov	r4, r3
 800521c:	4615      	mov	r5, r2
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	022b      	lsls	r3, r5, #8
 8005228:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800522c:	0222      	lsls	r2, r4, #8
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6849      	ldr	r1, [r1, #4]
 8005232:	0849      	lsrs	r1, r1, #1
 8005234:	2000      	movs	r0, #0
 8005236:	4688      	mov	r8, r1
 8005238:	4681      	mov	r9, r0
 800523a:	eb12 0a08 	adds.w	sl, r2, r8
 800523e:	eb43 0b09 	adc.w	fp, r3, r9
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005250:	4650      	mov	r0, sl
 8005252:	4659      	mov	r1, fp
 8005254:	f7fb fc4a 	bl	8000aec <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4613      	mov	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005266:	d308      	bcc.n	800527a <UART_SetConfig+0x3de>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526e:	d204      	bcs.n	800527a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	60da      	str	r2, [r3, #12]
 8005278:	e0b6      	b.n	80053e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005280:	e0b2      	b.n	80053e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528a:	d15e      	bne.n	800534a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800528c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005290:	2b08      	cmp	r3, #8
 8005292:	d828      	bhi.n	80052e6 <UART_SetConfig+0x44a>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x400>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d7 	.word	0x080052d7
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052e7 	.word	0x080052e7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe fd10 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 80052c4:	61f8      	str	r0, [r7, #28]
        break;
 80052c6:	e014      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fe fd22 	bl	8003d10 <HAL_RCC_GetPCLK2Freq>
 80052cc:	61f8      	str	r0, [r7, #28]
        break;
 80052ce:	e010      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b4d      	ldr	r3, [pc, #308]	; (8005408 <UART_SetConfig+0x56c>)
 80052d2:	61fb      	str	r3, [r7, #28]
        break;
 80052d4:	e00d      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe fc6d 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 80052da:	61f8      	str	r0, [r7, #28]
        break;
 80052dc:	e009      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e2:	61fb      	str	r3, [r7, #28]
        break;
 80052e4:	e005      	b.n	80052f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d077      	beq.n	80053e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005a      	lsls	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	441a      	add	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b0f      	cmp	r3, #15
 8005312:	d916      	bls.n	8005342 <UART_SetConfig+0x4a6>
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531a:	d212      	bcs.n	8005342 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f023 030f 	bic.w	r3, r3, #15
 8005324:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	b29a      	uxth	r2, r3
 8005332:	8afb      	ldrh	r3, [r7, #22]
 8005334:	4313      	orrs	r3, r2
 8005336:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	8afa      	ldrh	r2, [r7, #22]
 800533e:	60da      	str	r2, [r3, #12]
 8005340:	e052      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005348:	e04e      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800534a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800534e:	2b08      	cmp	r3, #8
 8005350:	d827      	bhi.n	80053a2 <UART_SetConfig+0x506>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <UART_SetConfig+0x4bc>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800537d 	.word	0x0800537d
 800535c:	08005385 	.word	0x08005385
 8005360:	0800538d 	.word	0x0800538d
 8005364:	080053a3 	.word	0x080053a3
 8005368:	08005393 	.word	0x08005393
 800536c:	080053a3 	.word	0x080053a3
 8005370:	080053a3 	.word	0x080053a3
 8005374:	080053a3 	.word	0x080053a3
 8005378:	0800539b 	.word	0x0800539b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800537c:	f7fe fcb2 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 8005380:	61f8      	str	r0, [r7, #28]
        break;
 8005382:	e014      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005384:	f7fe fcc4 	bl	8003d10 <HAL_RCC_GetPCLK2Freq>
 8005388:	61f8      	str	r0, [r7, #28]
        break;
 800538a:	e010      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800538c:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <UART_SetConfig+0x56c>)
 800538e:	61fb      	str	r3, [r7, #28]
        break;
 8005390:	e00d      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005392:	f7fe fc0f 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8005396:	61f8      	str	r0, [r7, #28]
        break;
 8005398:	e009      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800539a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800539e:	61fb      	str	r3, [r7, #28]
        break;
 80053a0:	e005      	b.n	80053ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053ac:	bf00      	nop
    }

    if (pclk != 0U)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d019      	beq.n	80053e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	085a      	lsrs	r2, r3, #1
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	441a      	add	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d909      	bls.n	80053e2 <UART_SetConfig+0x546>
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d205      	bcs.n	80053e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	e002      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	; 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005402:	bf00      	nop
 8005404:	40008000 	.word	0x40008000
 8005408:	00f42400 	.word	0x00f42400

0800540c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01a      	beq.n	8005522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800550a:	d10a      	bne.n	8005522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af02      	add	r7, sp, #8
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005560:	f7fc fdd6 	bl	8002110 <HAL_GetTick>
 8005564:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b08      	cmp	r3, #8
 8005572:	d10e      	bne.n	8005592 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f82d 	bl	80055e2 <UART_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e023      	b.n	80055da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d10e      	bne.n	80055be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f817 	bl	80055e2 <UART_WaitOnFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e00d      	b.n	80055da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b09c      	sub	sp, #112	; 0x70
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	603b      	str	r3, [r7, #0]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f2:	e0a5      	b.n	8005740 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	f000 80a1 	beq.w	8005740 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fe:	f7fc fd87 	bl	8002110 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800560a:	429a      	cmp	r2, r3
 800560c:	d302      	bcc.n	8005614 <UART_WaitOnFlagUntilTimeout+0x32>
 800560e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005610:	2b00      	cmp	r3, #0
 8005612:	d13e      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005628:	667b      	str	r3, [r7, #100]	; 0x64
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005634:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3308      	adds	r3, #8
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	663b      	str	r3, [r7, #96]	; 0x60
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3308      	adds	r3, #8
 8005664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005666:	64ba      	str	r2, [r7, #72]	; 0x48
 8005668:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800566c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e5      	bne.n	8005646 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e067      	b.n	8005762 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d04f      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d147      	bne.n	8005740 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
 80056da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e6      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	613b      	str	r3, [r7, #16]
   return(result);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	66bb      	str	r3, [r7, #104]	; 0x68
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800570c:	623a      	str	r2, [r7, #32]
 800570e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	69f9      	ldr	r1, [r7, #28]
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	61bb      	str	r3, [r7, #24]
   return(result);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e5      	bne.n	80056ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e010      	b.n	8005762 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	429a      	cmp	r2, r3
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	429a      	cmp	r2, r3
 800575c:	f43f af4a 	beq.w	80055f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3770      	adds	r7, #112	; 0x70
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <__errno>:
 800576c:	4b01      	ldr	r3, [pc, #4]	; (8005774 <__errno+0x8>)
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2000001c 	.word	0x2000001c

08005778 <__libc_init_array>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	4d0d      	ldr	r5, [pc, #52]	; (80057b0 <__libc_init_array+0x38>)
 800577c:	4c0d      	ldr	r4, [pc, #52]	; (80057b4 <__libc_init_array+0x3c>)
 800577e:	1b64      	subs	r4, r4, r5
 8005780:	10a4      	asrs	r4, r4, #2
 8005782:	2600      	movs	r6, #0
 8005784:	42a6      	cmp	r6, r4
 8005786:	d109      	bne.n	800579c <__libc_init_array+0x24>
 8005788:	4d0b      	ldr	r5, [pc, #44]	; (80057b8 <__libc_init_array+0x40>)
 800578a:	4c0c      	ldr	r4, [pc, #48]	; (80057bc <__libc_init_array+0x44>)
 800578c:	f000 fc8e 	bl	80060ac <_init>
 8005790:	1b64      	subs	r4, r4, r5
 8005792:	10a4      	asrs	r4, r4, #2
 8005794:	2600      	movs	r6, #0
 8005796:	42a6      	cmp	r6, r4
 8005798:	d105      	bne.n	80057a6 <__libc_init_array+0x2e>
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a0:	4798      	blx	r3
 80057a2:	3601      	adds	r6, #1
 80057a4:	e7ee      	b.n	8005784 <__libc_init_array+0xc>
 80057a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057aa:	4798      	blx	r3
 80057ac:	3601      	adds	r6, #1
 80057ae:	e7f2      	b.n	8005796 <__libc_init_array+0x1e>
 80057b0:	08007650 	.word	0x08007650
 80057b4:	08007650 	.word	0x08007650
 80057b8:	08007650 	.word	0x08007650
 80057bc:	08007654 	.word	0x08007654

080057c0 <memset>:
 80057c0:	4402      	add	r2, r0
 80057c2:	4603      	mov	r3, r0
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d100      	bne.n	80057ca <memset+0xa>
 80057c8:	4770      	bx	lr
 80057ca:	f803 1b01 	strb.w	r1, [r3], #1
 80057ce:	e7f9      	b.n	80057c4 <memset+0x4>

080057d0 <siprintf>:
 80057d0:	b40e      	push	{r1, r2, r3}
 80057d2:	b500      	push	{lr}
 80057d4:	b09c      	sub	sp, #112	; 0x70
 80057d6:	ab1d      	add	r3, sp, #116	; 0x74
 80057d8:	9002      	str	r0, [sp, #8]
 80057da:	9006      	str	r0, [sp, #24]
 80057dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057e0:	4809      	ldr	r0, [pc, #36]	; (8005808 <siprintf+0x38>)
 80057e2:	9107      	str	r1, [sp, #28]
 80057e4:	9104      	str	r1, [sp, #16]
 80057e6:	4909      	ldr	r1, [pc, #36]	; (800580c <siprintf+0x3c>)
 80057e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ec:	9105      	str	r1, [sp, #20]
 80057ee:	6800      	ldr	r0, [r0, #0]
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	a902      	add	r1, sp, #8
 80057f4:	f000 f868 	bl	80058c8 <_svfiprintf_r>
 80057f8:	9b02      	ldr	r3, [sp, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	b01c      	add	sp, #112	; 0x70
 8005800:	f85d eb04 	ldr.w	lr, [sp], #4
 8005804:	b003      	add	sp, #12
 8005806:	4770      	bx	lr
 8005808:	2000001c 	.word	0x2000001c
 800580c:	ffff0208 	.word	0xffff0208

08005810 <__ssputs_r>:
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	688e      	ldr	r6, [r1, #8]
 8005816:	429e      	cmp	r6, r3
 8005818:	4682      	mov	sl, r0
 800581a:	460c      	mov	r4, r1
 800581c:	4690      	mov	r8, r2
 800581e:	461f      	mov	r7, r3
 8005820:	d838      	bhi.n	8005894 <__ssputs_r+0x84>
 8005822:	898a      	ldrh	r2, [r1, #12]
 8005824:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005828:	d032      	beq.n	8005890 <__ssputs_r+0x80>
 800582a:	6825      	ldr	r5, [r4, #0]
 800582c:	6909      	ldr	r1, [r1, #16]
 800582e:	eba5 0901 	sub.w	r9, r5, r1
 8005832:	6965      	ldr	r5, [r4, #20]
 8005834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800583c:	3301      	adds	r3, #1
 800583e:	444b      	add	r3, r9
 8005840:	106d      	asrs	r5, r5, #1
 8005842:	429d      	cmp	r5, r3
 8005844:	bf38      	it	cc
 8005846:	461d      	movcc	r5, r3
 8005848:	0553      	lsls	r3, r2, #21
 800584a:	d531      	bpl.n	80058b0 <__ssputs_r+0xa0>
 800584c:	4629      	mov	r1, r5
 800584e:	f000 fb63 	bl	8005f18 <_malloc_r>
 8005852:	4606      	mov	r6, r0
 8005854:	b950      	cbnz	r0, 800586c <__ssputs_r+0x5c>
 8005856:	230c      	movs	r3, #12
 8005858:	f8ca 3000 	str.w	r3, [sl]
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005862:	81a3      	strh	r3, [r4, #12]
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586c:	6921      	ldr	r1, [r4, #16]
 800586e:	464a      	mov	r2, r9
 8005870:	f000 fabe 	bl	8005df0 <memcpy>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800587a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	6126      	str	r6, [r4, #16]
 8005882:	6165      	str	r5, [r4, #20]
 8005884:	444e      	add	r6, r9
 8005886:	eba5 0509 	sub.w	r5, r5, r9
 800588a:	6026      	str	r6, [r4, #0]
 800588c:	60a5      	str	r5, [r4, #8]
 800588e:	463e      	mov	r6, r7
 8005890:	42be      	cmp	r6, r7
 8005892:	d900      	bls.n	8005896 <__ssputs_r+0x86>
 8005894:	463e      	mov	r6, r7
 8005896:	6820      	ldr	r0, [r4, #0]
 8005898:	4632      	mov	r2, r6
 800589a:	4641      	mov	r1, r8
 800589c:	f000 fab6 	bl	8005e0c <memmove>
 80058a0:	68a3      	ldr	r3, [r4, #8]
 80058a2:	1b9b      	subs	r3, r3, r6
 80058a4:	60a3      	str	r3, [r4, #8]
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	4433      	add	r3, r6
 80058aa:	6023      	str	r3, [r4, #0]
 80058ac:	2000      	movs	r0, #0
 80058ae:	e7db      	b.n	8005868 <__ssputs_r+0x58>
 80058b0:	462a      	mov	r2, r5
 80058b2:	f000 fba5 	bl	8006000 <_realloc_r>
 80058b6:	4606      	mov	r6, r0
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d1e1      	bne.n	8005880 <__ssputs_r+0x70>
 80058bc:	6921      	ldr	r1, [r4, #16]
 80058be:	4650      	mov	r0, sl
 80058c0:	f000 fabe 	bl	8005e40 <_free_r>
 80058c4:	e7c7      	b.n	8005856 <__ssputs_r+0x46>
	...

080058c8 <_svfiprintf_r>:
 80058c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058cc:	4698      	mov	r8, r3
 80058ce:	898b      	ldrh	r3, [r1, #12]
 80058d0:	061b      	lsls	r3, r3, #24
 80058d2:	b09d      	sub	sp, #116	; 0x74
 80058d4:	4607      	mov	r7, r0
 80058d6:	460d      	mov	r5, r1
 80058d8:	4614      	mov	r4, r2
 80058da:	d50e      	bpl.n	80058fa <_svfiprintf_r+0x32>
 80058dc:	690b      	ldr	r3, [r1, #16]
 80058de:	b963      	cbnz	r3, 80058fa <_svfiprintf_r+0x32>
 80058e0:	2140      	movs	r1, #64	; 0x40
 80058e2:	f000 fb19 	bl	8005f18 <_malloc_r>
 80058e6:	6028      	str	r0, [r5, #0]
 80058e8:	6128      	str	r0, [r5, #16]
 80058ea:	b920      	cbnz	r0, 80058f6 <_svfiprintf_r+0x2e>
 80058ec:	230c      	movs	r3, #12
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	e0d1      	b.n	8005a9a <_svfiprintf_r+0x1d2>
 80058f6:	2340      	movs	r3, #64	; 0x40
 80058f8:	616b      	str	r3, [r5, #20]
 80058fa:	2300      	movs	r3, #0
 80058fc:	9309      	str	r3, [sp, #36]	; 0x24
 80058fe:	2320      	movs	r3, #32
 8005900:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005904:	f8cd 800c 	str.w	r8, [sp, #12]
 8005908:	2330      	movs	r3, #48	; 0x30
 800590a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ab4 <_svfiprintf_r+0x1ec>
 800590e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005912:	f04f 0901 	mov.w	r9, #1
 8005916:	4623      	mov	r3, r4
 8005918:	469a      	mov	sl, r3
 800591a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800591e:	b10a      	cbz	r2, 8005924 <_svfiprintf_r+0x5c>
 8005920:	2a25      	cmp	r2, #37	; 0x25
 8005922:	d1f9      	bne.n	8005918 <_svfiprintf_r+0x50>
 8005924:	ebba 0b04 	subs.w	fp, sl, r4
 8005928:	d00b      	beq.n	8005942 <_svfiprintf_r+0x7a>
 800592a:	465b      	mov	r3, fp
 800592c:	4622      	mov	r2, r4
 800592e:	4629      	mov	r1, r5
 8005930:	4638      	mov	r0, r7
 8005932:	f7ff ff6d 	bl	8005810 <__ssputs_r>
 8005936:	3001      	adds	r0, #1
 8005938:	f000 80aa 	beq.w	8005a90 <_svfiprintf_r+0x1c8>
 800593c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800593e:	445a      	add	r2, fp
 8005940:	9209      	str	r2, [sp, #36]	; 0x24
 8005942:	f89a 3000 	ldrb.w	r3, [sl]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 80a2 	beq.w	8005a90 <_svfiprintf_r+0x1c8>
 800594c:	2300      	movs	r3, #0
 800594e:	f04f 32ff 	mov.w	r2, #4294967295
 8005952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005956:	f10a 0a01 	add.w	sl, sl, #1
 800595a:	9304      	str	r3, [sp, #16]
 800595c:	9307      	str	r3, [sp, #28]
 800595e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005962:	931a      	str	r3, [sp, #104]	; 0x68
 8005964:	4654      	mov	r4, sl
 8005966:	2205      	movs	r2, #5
 8005968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800596c:	4851      	ldr	r0, [pc, #324]	; (8005ab4 <_svfiprintf_r+0x1ec>)
 800596e:	f7fa fc2f 	bl	80001d0 <memchr>
 8005972:	9a04      	ldr	r2, [sp, #16]
 8005974:	b9d8      	cbnz	r0, 80059ae <_svfiprintf_r+0xe6>
 8005976:	06d0      	lsls	r0, r2, #27
 8005978:	bf44      	itt	mi
 800597a:	2320      	movmi	r3, #32
 800597c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005980:	0711      	lsls	r1, r2, #28
 8005982:	bf44      	itt	mi
 8005984:	232b      	movmi	r3, #43	; 0x2b
 8005986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800598a:	f89a 3000 	ldrb.w	r3, [sl]
 800598e:	2b2a      	cmp	r3, #42	; 0x2a
 8005990:	d015      	beq.n	80059be <_svfiprintf_r+0xf6>
 8005992:	9a07      	ldr	r2, [sp, #28]
 8005994:	4654      	mov	r4, sl
 8005996:	2000      	movs	r0, #0
 8005998:	f04f 0c0a 	mov.w	ip, #10
 800599c:	4621      	mov	r1, r4
 800599e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059a2:	3b30      	subs	r3, #48	; 0x30
 80059a4:	2b09      	cmp	r3, #9
 80059a6:	d94e      	bls.n	8005a46 <_svfiprintf_r+0x17e>
 80059a8:	b1b0      	cbz	r0, 80059d8 <_svfiprintf_r+0x110>
 80059aa:	9207      	str	r2, [sp, #28]
 80059ac:	e014      	b.n	80059d8 <_svfiprintf_r+0x110>
 80059ae:	eba0 0308 	sub.w	r3, r0, r8
 80059b2:	fa09 f303 	lsl.w	r3, r9, r3
 80059b6:	4313      	orrs	r3, r2
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	46a2      	mov	sl, r4
 80059bc:	e7d2      	b.n	8005964 <_svfiprintf_r+0x9c>
 80059be:	9b03      	ldr	r3, [sp, #12]
 80059c0:	1d19      	adds	r1, r3, #4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	9103      	str	r1, [sp, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bfbb      	ittet	lt
 80059ca:	425b      	neglt	r3, r3
 80059cc:	f042 0202 	orrlt.w	r2, r2, #2
 80059d0:	9307      	strge	r3, [sp, #28]
 80059d2:	9307      	strlt	r3, [sp, #28]
 80059d4:	bfb8      	it	lt
 80059d6:	9204      	strlt	r2, [sp, #16]
 80059d8:	7823      	ldrb	r3, [r4, #0]
 80059da:	2b2e      	cmp	r3, #46	; 0x2e
 80059dc:	d10c      	bne.n	80059f8 <_svfiprintf_r+0x130>
 80059de:	7863      	ldrb	r3, [r4, #1]
 80059e0:	2b2a      	cmp	r3, #42	; 0x2a
 80059e2:	d135      	bne.n	8005a50 <_svfiprintf_r+0x188>
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	1d1a      	adds	r2, r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	9203      	str	r2, [sp, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bfb8      	it	lt
 80059f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80059f4:	3402      	adds	r4, #2
 80059f6:	9305      	str	r3, [sp, #20]
 80059f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ac4 <_svfiprintf_r+0x1fc>
 80059fc:	7821      	ldrb	r1, [r4, #0]
 80059fe:	2203      	movs	r2, #3
 8005a00:	4650      	mov	r0, sl
 8005a02:	f7fa fbe5 	bl	80001d0 <memchr>
 8005a06:	b140      	cbz	r0, 8005a1a <_svfiprintf_r+0x152>
 8005a08:	2340      	movs	r3, #64	; 0x40
 8005a0a:	eba0 000a 	sub.w	r0, r0, sl
 8005a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8005a12:	9b04      	ldr	r3, [sp, #16]
 8005a14:	4303      	orrs	r3, r0
 8005a16:	3401      	adds	r4, #1
 8005a18:	9304      	str	r3, [sp, #16]
 8005a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a1e:	4826      	ldr	r0, [pc, #152]	; (8005ab8 <_svfiprintf_r+0x1f0>)
 8005a20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a24:	2206      	movs	r2, #6
 8005a26:	f7fa fbd3 	bl	80001d0 <memchr>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d038      	beq.n	8005aa0 <_svfiprintf_r+0x1d8>
 8005a2e:	4b23      	ldr	r3, [pc, #140]	; (8005abc <_svfiprintf_r+0x1f4>)
 8005a30:	bb1b      	cbnz	r3, 8005a7a <_svfiprintf_r+0x1b2>
 8005a32:	9b03      	ldr	r3, [sp, #12]
 8005a34:	3307      	adds	r3, #7
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	9303      	str	r3, [sp, #12]
 8005a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a40:	4433      	add	r3, r6
 8005a42:	9309      	str	r3, [sp, #36]	; 0x24
 8005a44:	e767      	b.n	8005916 <_svfiprintf_r+0x4e>
 8005a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	e7a5      	b.n	800599c <_svfiprintf_r+0xd4>
 8005a50:	2300      	movs	r3, #0
 8005a52:	3401      	adds	r4, #1
 8005a54:	9305      	str	r3, [sp, #20]
 8005a56:	4619      	mov	r1, r3
 8005a58:	f04f 0c0a 	mov.w	ip, #10
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a62:	3a30      	subs	r2, #48	; 0x30
 8005a64:	2a09      	cmp	r2, #9
 8005a66:	d903      	bls.n	8005a70 <_svfiprintf_r+0x1a8>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0c5      	beq.n	80059f8 <_svfiprintf_r+0x130>
 8005a6c:	9105      	str	r1, [sp, #20]
 8005a6e:	e7c3      	b.n	80059f8 <_svfiprintf_r+0x130>
 8005a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a74:	4604      	mov	r4, r0
 8005a76:	2301      	movs	r3, #1
 8005a78:	e7f0      	b.n	8005a5c <_svfiprintf_r+0x194>
 8005a7a:	ab03      	add	r3, sp, #12
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	462a      	mov	r2, r5
 8005a80:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <_svfiprintf_r+0x1f8>)
 8005a82:	a904      	add	r1, sp, #16
 8005a84:	4638      	mov	r0, r7
 8005a86:	f3af 8000 	nop.w
 8005a8a:	1c42      	adds	r2, r0, #1
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	d1d6      	bne.n	8005a3e <_svfiprintf_r+0x176>
 8005a90:	89ab      	ldrh	r3, [r5, #12]
 8005a92:	065b      	lsls	r3, r3, #25
 8005a94:	f53f af2c 	bmi.w	80058f0 <_svfiprintf_r+0x28>
 8005a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a9a:	b01d      	add	sp, #116	; 0x74
 8005a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa0:	ab03      	add	r3, sp, #12
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	462a      	mov	r2, r5
 8005aa6:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <_svfiprintf_r+0x1f8>)
 8005aa8:	a904      	add	r1, sp, #16
 8005aaa:	4638      	mov	r0, r7
 8005aac:	f000 f87a 	bl	8005ba4 <_printf_i>
 8005ab0:	e7eb      	b.n	8005a8a <_svfiprintf_r+0x1c2>
 8005ab2:	bf00      	nop
 8005ab4:	08007614 	.word	0x08007614
 8005ab8:	0800761e 	.word	0x0800761e
 8005abc:	00000000 	.word	0x00000000
 8005ac0:	08005811 	.word	0x08005811
 8005ac4:	0800761a 	.word	0x0800761a

08005ac8 <_printf_common>:
 8005ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	4616      	mov	r6, r2
 8005ace:	4699      	mov	r9, r3
 8005ad0:	688a      	ldr	r2, [r1, #8]
 8005ad2:	690b      	ldr	r3, [r1, #16]
 8005ad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	bfb8      	it	lt
 8005adc:	4613      	movlt	r3, r2
 8005ade:	6033      	str	r3, [r6, #0]
 8005ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ae4:	4607      	mov	r7, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	b10a      	cbz	r2, 8005aee <_printf_common+0x26>
 8005aea:	3301      	adds	r3, #1
 8005aec:	6033      	str	r3, [r6, #0]
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	0699      	lsls	r1, r3, #26
 8005af2:	bf42      	ittt	mi
 8005af4:	6833      	ldrmi	r3, [r6, #0]
 8005af6:	3302      	addmi	r3, #2
 8005af8:	6033      	strmi	r3, [r6, #0]
 8005afa:	6825      	ldr	r5, [r4, #0]
 8005afc:	f015 0506 	ands.w	r5, r5, #6
 8005b00:	d106      	bne.n	8005b10 <_printf_common+0x48>
 8005b02:	f104 0a19 	add.w	sl, r4, #25
 8005b06:	68e3      	ldr	r3, [r4, #12]
 8005b08:	6832      	ldr	r2, [r6, #0]
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	42ab      	cmp	r3, r5
 8005b0e:	dc26      	bgt.n	8005b5e <_printf_common+0x96>
 8005b10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b14:	1e13      	subs	r3, r2, #0
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	bf18      	it	ne
 8005b1a:	2301      	movne	r3, #1
 8005b1c:	0692      	lsls	r2, r2, #26
 8005b1e:	d42b      	bmi.n	8005b78 <_printf_common+0xb0>
 8005b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b24:	4649      	mov	r1, r9
 8005b26:	4638      	mov	r0, r7
 8005b28:	47c0      	blx	r8
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d01e      	beq.n	8005b6c <_printf_common+0xa4>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	68e5      	ldr	r5, [r4, #12]
 8005b32:	6832      	ldr	r2, [r6, #0]
 8005b34:	f003 0306 	and.w	r3, r3, #6
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	bf08      	it	eq
 8005b3c:	1aad      	subeq	r5, r5, r2
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	6922      	ldr	r2, [r4, #16]
 8005b42:	bf0c      	ite	eq
 8005b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b48:	2500      	movne	r5, #0
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	bfc4      	itt	gt
 8005b4e:	1a9b      	subgt	r3, r3, r2
 8005b50:	18ed      	addgt	r5, r5, r3
 8005b52:	2600      	movs	r6, #0
 8005b54:	341a      	adds	r4, #26
 8005b56:	42b5      	cmp	r5, r6
 8005b58:	d11a      	bne.n	8005b90 <_printf_common+0xc8>
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	e008      	b.n	8005b70 <_printf_common+0xa8>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4652      	mov	r2, sl
 8005b62:	4649      	mov	r1, r9
 8005b64:	4638      	mov	r0, r7
 8005b66:	47c0      	blx	r8
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d103      	bne.n	8005b74 <_printf_common+0xac>
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b74:	3501      	adds	r5, #1
 8005b76:	e7c6      	b.n	8005b06 <_printf_common+0x3e>
 8005b78:	18e1      	adds	r1, r4, r3
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	2030      	movs	r0, #48	; 0x30
 8005b7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b82:	4422      	add	r2, r4
 8005b84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	e7c7      	b.n	8005b20 <_printf_common+0x58>
 8005b90:	2301      	movs	r3, #1
 8005b92:	4622      	mov	r2, r4
 8005b94:	4649      	mov	r1, r9
 8005b96:	4638      	mov	r0, r7
 8005b98:	47c0      	blx	r8
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d0e6      	beq.n	8005b6c <_printf_common+0xa4>
 8005b9e:	3601      	adds	r6, #1
 8005ba0:	e7d9      	b.n	8005b56 <_printf_common+0x8e>
	...

08005ba4 <_printf_i>:
 8005ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba8:	7e0f      	ldrb	r7, [r1, #24]
 8005baa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bac:	2f78      	cmp	r7, #120	; 0x78
 8005bae:	4691      	mov	r9, r2
 8005bb0:	4680      	mov	r8, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	469a      	mov	sl, r3
 8005bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bba:	d807      	bhi.n	8005bcc <_printf_i+0x28>
 8005bbc:	2f62      	cmp	r7, #98	; 0x62
 8005bbe:	d80a      	bhi.n	8005bd6 <_printf_i+0x32>
 8005bc0:	2f00      	cmp	r7, #0
 8005bc2:	f000 80d8 	beq.w	8005d76 <_printf_i+0x1d2>
 8005bc6:	2f58      	cmp	r7, #88	; 0x58
 8005bc8:	f000 80a3 	beq.w	8005d12 <_printf_i+0x16e>
 8005bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bd4:	e03a      	b.n	8005c4c <_printf_i+0xa8>
 8005bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bda:	2b15      	cmp	r3, #21
 8005bdc:	d8f6      	bhi.n	8005bcc <_printf_i+0x28>
 8005bde:	a101      	add	r1, pc, #4	; (adr r1, 8005be4 <_printf_i+0x40>)
 8005be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005be4:	08005c3d 	.word	0x08005c3d
 8005be8:	08005c51 	.word	0x08005c51
 8005bec:	08005bcd 	.word	0x08005bcd
 8005bf0:	08005bcd 	.word	0x08005bcd
 8005bf4:	08005bcd 	.word	0x08005bcd
 8005bf8:	08005bcd 	.word	0x08005bcd
 8005bfc:	08005c51 	.word	0x08005c51
 8005c00:	08005bcd 	.word	0x08005bcd
 8005c04:	08005bcd 	.word	0x08005bcd
 8005c08:	08005bcd 	.word	0x08005bcd
 8005c0c:	08005bcd 	.word	0x08005bcd
 8005c10:	08005d5d 	.word	0x08005d5d
 8005c14:	08005c81 	.word	0x08005c81
 8005c18:	08005d3f 	.word	0x08005d3f
 8005c1c:	08005bcd 	.word	0x08005bcd
 8005c20:	08005bcd 	.word	0x08005bcd
 8005c24:	08005d7f 	.word	0x08005d7f
 8005c28:	08005bcd 	.word	0x08005bcd
 8005c2c:	08005c81 	.word	0x08005c81
 8005c30:	08005bcd 	.word	0x08005bcd
 8005c34:	08005bcd 	.word	0x08005bcd
 8005c38:	08005d47 	.word	0x08005d47
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	1d1a      	adds	r2, r3, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	602a      	str	r2, [r5, #0]
 8005c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0a3      	b.n	8005d98 <_printf_i+0x1f4>
 8005c50:	6820      	ldr	r0, [r4, #0]
 8005c52:	6829      	ldr	r1, [r5, #0]
 8005c54:	0606      	lsls	r6, r0, #24
 8005c56:	f101 0304 	add.w	r3, r1, #4
 8005c5a:	d50a      	bpl.n	8005c72 <_printf_i+0xce>
 8005c5c:	680e      	ldr	r6, [r1, #0]
 8005c5e:	602b      	str	r3, [r5, #0]
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	da03      	bge.n	8005c6c <_printf_i+0xc8>
 8005c64:	232d      	movs	r3, #45	; 0x2d
 8005c66:	4276      	negs	r6, r6
 8005c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c6c:	485e      	ldr	r0, [pc, #376]	; (8005de8 <_printf_i+0x244>)
 8005c6e:	230a      	movs	r3, #10
 8005c70:	e019      	b.n	8005ca6 <_printf_i+0x102>
 8005c72:	680e      	ldr	r6, [r1, #0]
 8005c74:	602b      	str	r3, [r5, #0]
 8005c76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c7a:	bf18      	it	ne
 8005c7c:	b236      	sxthne	r6, r6
 8005c7e:	e7ef      	b.n	8005c60 <_printf_i+0xbc>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	6820      	ldr	r0, [r4, #0]
 8005c84:	1d19      	adds	r1, r3, #4
 8005c86:	6029      	str	r1, [r5, #0]
 8005c88:	0601      	lsls	r1, r0, #24
 8005c8a:	d501      	bpl.n	8005c90 <_printf_i+0xec>
 8005c8c:	681e      	ldr	r6, [r3, #0]
 8005c8e:	e002      	b.n	8005c96 <_printf_i+0xf2>
 8005c90:	0646      	lsls	r6, r0, #25
 8005c92:	d5fb      	bpl.n	8005c8c <_printf_i+0xe8>
 8005c94:	881e      	ldrh	r6, [r3, #0]
 8005c96:	4854      	ldr	r0, [pc, #336]	; (8005de8 <_printf_i+0x244>)
 8005c98:	2f6f      	cmp	r7, #111	; 0x6f
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2308      	moveq	r3, #8
 8005c9e:	230a      	movne	r3, #10
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ca6:	6865      	ldr	r5, [r4, #4]
 8005ca8:	60a5      	str	r5, [r4, #8]
 8005caa:	2d00      	cmp	r5, #0
 8005cac:	bfa2      	ittt	ge
 8005cae:	6821      	ldrge	r1, [r4, #0]
 8005cb0:	f021 0104 	bicge.w	r1, r1, #4
 8005cb4:	6021      	strge	r1, [r4, #0]
 8005cb6:	b90e      	cbnz	r6, 8005cbc <_printf_i+0x118>
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	d04d      	beq.n	8005d58 <_printf_i+0x1b4>
 8005cbc:	4615      	mov	r5, r2
 8005cbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cc2:	fb03 6711 	mls	r7, r3, r1, r6
 8005cc6:	5dc7      	ldrb	r7, [r0, r7]
 8005cc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ccc:	4637      	mov	r7, r6
 8005cce:	42bb      	cmp	r3, r7
 8005cd0:	460e      	mov	r6, r1
 8005cd2:	d9f4      	bls.n	8005cbe <_printf_i+0x11a>
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d10b      	bne.n	8005cf0 <_printf_i+0x14c>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	07de      	lsls	r6, r3, #31
 8005cdc:	d508      	bpl.n	8005cf0 <_printf_i+0x14c>
 8005cde:	6923      	ldr	r3, [r4, #16]
 8005ce0:	6861      	ldr	r1, [r4, #4]
 8005ce2:	4299      	cmp	r1, r3
 8005ce4:	bfde      	ittt	le
 8005ce6:	2330      	movle	r3, #48	; 0x30
 8005ce8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cf0:	1b52      	subs	r2, r2, r5
 8005cf2:	6122      	str	r2, [r4, #16]
 8005cf4:	f8cd a000 	str.w	sl, [sp]
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	aa03      	add	r2, sp, #12
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	4640      	mov	r0, r8
 8005d00:	f7ff fee2 	bl	8005ac8 <_printf_common>
 8005d04:	3001      	adds	r0, #1
 8005d06:	d14c      	bne.n	8005da2 <_printf_i+0x1fe>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	b004      	add	sp, #16
 8005d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d12:	4835      	ldr	r0, [pc, #212]	; (8005de8 <_printf_i+0x244>)
 8005d14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d18:	6829      	ldr	r1, [r5, #0]
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d20:	6029      	str	r1, [r5, #0]
 8005d22:	061d      	lsls	r5, r3, #24
 8005d24:	d514      	bpl.n	8005d50 <_printf_i+0x1ac>
 8005d26:	07df      	lsls	r7, r3, #31
 8005d28:	bf44      	itt	mi
 8005d2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d2e:	6023      	strmi	r3, [r4, #0]
 8005d30:	b91e      	cbnz	r6, 8005d3a <_printf_i+0x196>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	f023 0320 	bic.w	r3, r3, #32
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	2310      	movs	r3, #16
 8005d3c:	e7b0      	b.n	8005ca0 <_printf_i+0xfc>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	f043 0320 	orr.w	r3, r3, #32
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	2378      	movs	r3, #120	; 0x78
 8005d48:	4828      	ldr	r0, [pc, #160]	; (8005dec <_printf_i+0x248>)
 8005d4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d4e:	e7e3      	b.n	8005d18 <_printf_i+0x174>
 8005d50:	0659      	lsls	r1, r3, #25
 8005d52:	bf48      	it	mi
 8005d54:	b2b6      	uxthmi	r6, r6
 8005d56:	e7e6      	b.n	8005d26 <_printf_i+0x182>
 8005d58:	4615      	mov	r5, r2
 8005d5a:	e7bb      	b.n	8005cd4 <_printf_i+0x130>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	6826      	ldr	r6, [r4, #0]
 8005d60:	6961      	ldr	r1, [r4, #20]
 8005d62:	1d18      	adds	r0, r3, #4
 8005d64:	6028      	str	r0, [r5, #0]
 8005d66:	0635      	lsls	r5, r6, #24
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	d501      	bpl.n	8005d70 <_printf_i+0x1cc>
 8005d6c:	6019      	str	r1, [r3, #0]
 8005d6e:	e002      	b.n	8005d76 <_printf_i+0x1d2>
 8005d70:	0670      	lsls	r0, r6, #25
 8005d72:	d5fb      	bpl.n	8005d6c <_printf_i+0x1c8>
 8005d74:	8019      	strh	r1, [r3, #0]
 8005d76:	2300      	movs	r3, #0
 8005d78:	6123      	str	r3, [r4, #16]
 8005d7a:	4615      	mov	r5, r2
 8005d7c:	e7ba      	b.n	8005cf4 <_printf_i+0x150>
 8005d7e:	682b      	ldr	r3, [r5, #0]
 8005d80:	1d1a      	adds	r2, r3, #4
 8005d82:	602a      	str	r2, [r5, #0]
 8005d84:	681d      	ldr	r5, [r3, #0]
 8005d86:	6862      	ldr	r2, [r4, #4]
 8005d88:	2100      	movs	r1, #0
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f7fa fa20 	bl	80001d0 <memchr>
 8005d90:	b108      	cbz	r0, 8005d96 <_printf_i+0x1f2>
 8005d92:	1b40      	subs	r0, r0, r5
 8005d94:	6060      	str	r0, [r4, #4]
 8005d96:	6863      	ldr	r3, [r4, #4]
 8005d98:	6123      	str	r3, [r4, #16]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da0:	e7a8      	b.n	8005cf4 <_printf_i+0x150>
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	462a      	mov	r2, r5
 8005da6:	4649      	mov	r1, r9
 8005da8:	4640      	mov	r0, r8
 8005daa:	47d0      	blx	sl
 8005dac:	3001      	adds	r0, #1
 8005dae:	d0ab      	beq.n	8005d08 <_printf_i+0x164>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	079b      	lsls	r3, r3, #30
 8005db4:	d413      	bmi.n	8005dde <_printf_i+0x23a>
 8005db6:	68e0      	ldr	r0, [r4, #12]
 8005db8:	9b03      	ldr	r3, [sp, #12]
 8005dba:	4298      	cmp	r0, r3
 8005dbc:	bfb8      	it	lt
 8005dbe:	4618      	movlt	r0, r3
 8005dc0:	e7a4      	b.n	8005d0c <_printf_i+0x168>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4632      	mov	r2, r6
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	4640      	mov	r0, r8
 8005dca:	47d0      	blx	sl
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d09b      	beq.n	8005d08 <_printf_i+0x164>
 8005dd0:	3501      	adds	r5, #1
 8005dd2:	68e3      	ldr	r3, [r4, #12]
 8005dd4:	9903      	ldr	r1, [sp, #12]
 8005dd6:	1a5b      	subs	r3, r3, r1
 8005dd8:	42ab      	cmp	r3, r5
 8005dda:	dcf2      	bgt.n	8005dc2 <_printf_i+0x21e>
 8005ddc:	e7eb      	b.n	8005db6 <_printf_i+0x212>
 8005dde:	2500      	movs	r5, #0
 8005de0:	f104 0619 	add.w	r6, r4, #25
 8005de4:	e7f5      	b.n	8005dd2 <_printf_i+0x22e>
 8005de6:	bf00      	nop
 8005de8:	08007625 	.word	0x08007625
 8005dec:	08007636 	.word	0x08007636

08005df0 <memcpy>:
 8005df0:	440a      	add	r2, r1
 8005df2:	4291      	cmp	r1, r2
 8005df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005df8:	d100      	bne.n	8005dfc <memcpy+0xc>
 8005dfa:	4770      	bx	lr
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e06:	4291      	cmp	r1, r2
 8005e08:	d1f9      	bne.n	8005dfe <memcpy+0xe>
 8005e0a:	bd10      	pop	{r4, pc}

08005e0c <memmove>:
 8005e0c:	4288      	cmp	r0, r1
 8005e0e:	b510      	push	{r4, lr}
 8005e10:	eb01 0402 	add.w	r4, r1, r2
 8005e14:	d902      	bls.n	8005e1c <memmove+0x10>
 8005e16:	4284      	cmp	r4, r0
 8005e18:	4623      	mov	r3, r4
 8005e1a:	d807      	bhi.n	8005e2c <memmove+0x20>
 8005e1c:	1e43      	subs	r3, r0, #1
 8005e1e:	42a1      	cmp	r1, r4
 8005e20:	d008      	beq.n	8005e34 <memmove+0x28>
 8005e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e2a:	e7f8      	b.n	8005e1e <memmove+0x12>
 8005e2c:	4402      	add	r2, r0
 8005e2e:	4601      	mov	r1, r0
 8005e30:	428a      	cmp	r2, r1
 8005e32:	d100      	bne.n	8005e36 <memmove+0x2a>
 8005e34:	bd10      	pop	{r4, pc}
 8005e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e3e:	e7f7      	b.n	8005e30 <memmove+0x24>

08005e40 <_free_r>:
 8005e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e42:	2900      	cmp	r1, #0
 8005e44:	d044      	beq.n	8005ed0 <_free_r+0x90>
 8005e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4a:	9001      	str	r0, [sp, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e52:	bfb8      	it	lt
 8005e54:	18e4      	addlt	r4, r4, r3
 8005e56:	f000 f913 	bl	8006080 <__malloc_lock>
 8005e5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ed4 <_free_r+0x94>)
 8005e5c:	9801      	ldr	r0, [sp, #4]
 8005e5e:	6813      	ldr	r3, [r2, #0]
 8005e60:	b933      	cbnz	r3, 8005e70 <_free_r+0x30>
 8005e62:	6063      	str	r3, [r4, #4]
 8005e64:	6014      	str	r4, [r2, #0]
 8005e66:	b003      	add	sp, #12
 8005e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e6c:	f000 b90e 	b.w	800608c <__malloc_unlock>
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d908      	bls.n	8005e86 <_free_r+0x46>
 8005e74:	6825      	ldr	r5, [r4, #0]
 8005e76:	1961      	adds	r1, r4, r5
 8005e78:	428b      	cmp	r3, r1
 8005e7a:	bf01      	itttt	eq
 8005e7c:	6819      	ldreq	r1, [r3, #0]
 8005e7e:	685b      	ldreq	r3, [r3, #4]
 8005e80:	1949      	addeq	r1, r1, r5
 8005e82:	6021      	streq	r1, [r4, #0]
 8005e84:	e7ed      	b.n	8005e62 <_free_r+0x22>
 8005e86:	461a      	mov	r2, r3
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	b10b      	cbz	r3, 8005e90 <_free_r+0x50>
 8005e8c:	42a3      	cmp	r3, r4
 8005e8e:	d9fa      	bls.n	8005e86 <_free_r+0x46>
 8005e90:	6811      	ldr	r1, [r2, #0]
 8005e92:	1855      	adds	r5, r2, r1
 8005e94:	42a5      	cmp	r5, r4
 8005e96:	d10b      	bne.n	8005eb0 <_free_r+0x70>
 8005e98:	6824      	ldr	r4, [r4, #0]
 8005e9a:	4421      	add	r1, r4
 8005e9c:	1854      	adds	r4, r2, r1
 8005e9e:	42a3      	cmp	r3, r4
 8005ea0:	6011      	str	r1, [r2, #0]
 8005ea2:	d1e0      	bne.n	8005e66 <_free_r+0x26>
 8005ea4:	681c      	ldr	r4, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	6053      	str	r3, [r2, #4]
 8005eaa:	4421      	add	r1, r4
 8005eac:	6011      	str	r1, [r2, #0]
 8005eae:	e7da      	b.n	8005e66 <_free_r+0x26>
 8005eb0:	d902      	bls.n	8005eb8 <_free_r+0x78>
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	6003      	str	r3, [r0, #0]
 8005eb6:	e7d6      	b.n	8005e66 <_free_r+0x26>
 8005eb8:	6825      	ldr	r5, [r4, #0]
 8005eba:	1961      	adds	r1, r4, r5
 8005ebc:	428b      	cmp	r3, r1
 8005ebe:	bf04      	itt	eq
 8005ec0:	6819      	ldreq	r1, [r3, #0]
 8005ec2:	685b      	ldreq	r3, [r3, #4]
 8005ec4:	6063      	str	r3, [r4, #4]
 8005ec6:	bf04      	itt	eq
 8005ec8:	1949      	addeq	r1, r1, r5
 8005eca:	6021      	streq	r1, [r4, #0]
 8005ecc:	6054      	str	r4, [r2, #4]
 8005ece:	e7ca      	b.n	8005e66 <_free_r+0x26>
 8005ed0:	b003      	add	sp, #12
 8005ed2:	bd30      	pop	{r4, r5, pc}
 8005ed4:	20000608 	.word	0x20000608

08005ed8 <sbrk_aligned>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	4e0e      	ldr	r6, [pc, #56]	; (8005f14 <sbrk_aligned+0x3c>)
 8005edc:	460c      	mov	r4, r1
 8005ede:	6831      	ldr	r1, [r6, #0]
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	b911      	cbnz	r1, 8005eea <sbrk_aligned+0x12>
 8005ee4:	f000 f8bc 	bl	8006060 <_sbrk_r>
 8005ee8:	6030      	str	r0, [r6, #0]
 8005eea:	4621      	mov	r1, r4
 8005eec:	4628      	mov	r0, r5
 8005eee:	f000 f8b7 	bl	8006060 <_sbrk_r>
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	d00a      	beq.n	8005f0c <sbrk_aligned+0x34>
 8005ef6:	1cc4      	adds	r4, r0, #3
 8005ef8:	f024 0403 	bic.w	r4, r4, #3
 8005efc:	42a0      	cmp	r0, r4
 8005efe:	d007      	beq.n	8005f10 <sbrk_aligned+0x38>
 8005f00:	1a21      	subs	r1, r4, r0
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 f8ac 	bl	8006060 <_sbrk_r>
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d101      	bne.n	8005f10 <sbrk_aligned+0x38>
 8005f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f10:	4620      	mov	r0, r4
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	2000060c 	.word	0x2000060c

08005f18 <_malloc_r>:
 8005f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1c:	1ccd      	adds	r5, r1, #3
 8005f1e:	f025 0503 	bic.w	r5, r5, #3
 8005f22:	3508      	adds	r5, #8
 8005f24:	2d0c      	cmp	r5, #12
 8005f26:	bf38      	it	cc
 8005f28:	250c      	movcc	r5, #12
 8005f2a:	2d00      	cmp	r5, #0
 8005f2c:	4607      	mov	r7, r0
 8005f2e:	db01      	blt.n	8005f34 <_malloc_r+0x1c>
 8005f30:	42a9      	cmp	r1, r5
 8005f32:	d905      	bls.n	8005f40 <_malloc_r+0x28>
 8005f34:	230c      	movs	r3, #12
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	2600      	movs	r6, #0
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f40:	4e2e      	ldr	r6, [pc, #184]	; (8005ffc <_malloc_r+0xe4>)
 8005f42:	f000 f89d 	bl	8006080 <__malloc_lock>
 8005f46:	6833      	ldr	r3, [r6, #0]
 8005f48:	461c      	mov	r4, r3
 8005f4a:	bb34      	cbnz	r4, 8005f9a <_malloc_r+0x82>
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4638      	mov	r0, r7
 8005f50:	f7ff ffc2 	bl	8005ed8 <sbrk_aligned>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	4604      	mov	r4, r0
 8005f58:	d14d      	bne.n	8005ff6 <_malloc_r+0xde>
 8005f5a:	6834      	ldr	r4, [r6, #0]
 8005f5c:	4626      	mov	r6, r4
 8005f5e:	2e00      	cmp	r6, #0
 8005f60:	d140      	bne.n	8005fe4 <_malloc_r+0xcc>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	4631      	mov	r1, r6
 8005f66:	4638      	mov	r0, r7
 8005f68:	eb04 0803 	add.w	r8, r4, r3
 8005f6c:	f000 f878 	bl	8006060 <_sbrk_r>
 8005f70:	4580      	cmp	r8, r0
 8005f72:	d13a      	bne.n	8005fea <_malloc_r+0xd2>
 8005f74:	6821      	ldr	r1, [r4, #0]
 8005f76:	3503      	adds	r5, #3
 8005f78:	1a6d      	subs	r5, r5, r1
 8005f7a:	f025 0503 	bic.w	r5, r5, #3
 8005f7e:	3508      	adds	r5, #8
 8005f80:	2d0c      	cmp	r5, #12
 8005f82:	bf38      	it	cc
 8005f84:	250c      	movcc	r5, #12
 8005f86:	4629      	mov	r1, r5
 8005f88:	4638      	mov	r0, r7
 8005f8a:	f7ff ffa5 	bl	8005ed8 <sbrk_aligned>
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d02b      	beq.n	8005fea <_malloc_r+0xd2>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	442b      	add	r3, r5
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	e00e      	b.n	8005fb8 <_malloc_r+0xa0>
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	1b52      	subs	r2, r2, r5
 8005f9e:	d41e      	bmi.n	8005fde <_malloc_r+0xc6>
 8005fa0:	2a0b      	cmp	r2, #11
 8005fa2:	d916      	bls.n	8005fd2 <_malloc_r+0xba>
 8005fa4:	1961      	adds	r1, r4, r5
 8005fa6:	42a3      	cmp	r3, r4
 8005fa8:	6025      	str	r5, [r4, #0]
 8005faa:	bf18      	it	ne
 8005fac:	6059      	strne	r1, [r3, #4]
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	bf08      	it	eq
 8005fb2:	6031      	streq	r1, [r6, #0]
 8005fb4:	5162      	str	r2, [r4, r5]
 8005fb6:	604b      	str	r3, [r1, #4]
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f104 060b 	add.w	r6, r4, #11
 8005fbe:	f000 f865 	bl	800608c <__malloc_unlock>
 8005fc2:	f026 0607 	bic.w	r6, r6, #7
 8005fc6:	1d23      	adds	r3, r4, #4
 8005fc8:	1af2      	subs	r2, r6, r3
 8005fca:	d0b6      	beq.n	8005f3a <_malloc_r+0x22>
 8005fcc:	1b9b      	subs	r3, r3, r6
 8005fce:	50a3      	str	r3, [r4, r2]
 8005fd0:	e7b3      	b.n	8005f3a <_malloc_r+0x22>
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	bf0c      	ite	eq
 8005fd8:	6032      	streq	r2, [r6, #0]
 8005fda:	605a      	strne	r2, [r3, #4]
 8005fdc:	e7ec      	b.n	8005fb8 <_malloc_r+0xa0>
 8005fde:	4623      	mov	r3, r4
 8005fe0:	6864      	ldr	r4, [r4, #4]
 8005fe2:	e7b2      	b.n	8005f4a <_malloc_r+0x32>
 8005fe4:	4634      	mov	r4, r6
 8005fe6:	6876      	ldr	r6, [r6, #4]
 8005fe8:	e7b9      	b.n	8005f5e <_malloc_r+0x46>
 8005fea:	230c      	movs	r3, #12
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	4638      	mov	r0, r7
 8005ff0:	f000 f84c 	bl	800608c <__malloc_unlock>
 8005ff4:	e7a1      	b.n	8005f3a <_malloc_r+0x22>
 8005ff6:	6025      	str	r5, [r4, #0]
 8005ff8:	e7de      	b.n	8005fb8 <_malloc_r+0xa0>
 8005ffa:	bf00      	nop
 8005ffc:	20000608 	.word	0x20000608

08006000 <_realloc_r>:
 8006000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006004:	4680      	mov	r8, r0
 8006006:	4614      	mov	r4, r2
 8006008:	460e      	mov	r6, r1
 800600a:	b921      	cbnz	r1, 8006016 <_realloc_r+0x16>
 800600c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006010:	4611      	mov	r1, r2
 8006012:	f7ff bf81 	b.w	8005f18 <_malloc_r>
 8006016:	b92a      	cbnz	r2, 8006024 <_realloc_r+0x24>
 8006018:	f7ff ff12 	bl	8005e40 <_free_r>
 800601c:	4625      	mov	r5, r4
 800601e:	4628      	mov	r0, r5
 8006020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006024:	f000 f838 	bl	8006098 <_malloc_usable_size_r>
 8006028:	4284      	cmp	r4, r0
 800602a:	4607      	mov	r7, r0
 800602c:	d802      	bhi.n	8006034 <_realloc_r+0x34>
 800602e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006032:	d812      	bhi.n	800605a <_realloc_r+0x5a>
 8006034:	4621      	mov	r1, r4
 8006036:	4640      	mov	r0, r8
 8006038:	f7ff ff6e 	bl	8005f18 <_malloc_r>
 800603c:	4605      	mov	r5, r0
 800603e:	2800      	cmp	r0, #0
 8006040:	d0ed      	beq.n	800601e <_realloc_r+0x1e>
 8006042:	42bc      	cmp	r4, r7
 8006044:	4622      	mov	r2, r4
 8006046:	4631      	mov	r1, r6
 8006048:	bf28      	it	cs
 800604a:	463a      	movcs	r2, r7
 800604c:	f7ff fed0 	bl	8005df0 <memcpy>
 8006050:	4631      	mov	r1, r6
 8006052:	4640      	mov	r0, r8
 8006054:	f7ff fef4 	bl	8005e40 <_free_r>
 8006058:	e7e1      	b.n	800601e <_realloc_r+0x1e>
 800605a:	4635      	mov	r5, r6
 800605c:	e7df      	b.n	800601e <_realloc_r+0x1e>
	...

08006060 <_sbrk_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d06      	ldr	r5, [pc, #24]	; (800607c <_sbrk_r+0x1c>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	f7fb ff6e 	bl	8001f4c <_sbrk>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_sbrk_r+0x1a>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_sbrk_r+0x1a>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20000610 	.word	0x20000610

08006080 <__malloc_lock>:
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <__malloc_lock+0x8>)
 8006082:	f000 b811 	b.w	80060a8 <__retarget_lock_acquire_recursive>
 8006086:	bf00      	nop
 8006088:	20000614 	.word	0x20000614

0800608c <__malloc_unlock>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__malloc_unlock+0x8>)
 800608e:	f000 b80c 	b.w	80060aa <__retarget_lock_release_recursive>
 8006092:	bf00      	nop
 8006094:	20000614 	.word	0x20000614

08006098 <_malloc_usable_size_r>:
 8006098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800609c:	1f18      	subs	r0, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bfbc      	itt	lt
 80060a2:	580b      	ldrlt	r3, [r1, r0]
 80060a4:	18c0      	addlt	r0, r0, r3
 80060a6:	4770      	bx	lr

080060a8 <__retarget_lock_acquire_recursive>:
 80060a8:	4770      	bx	lr

080060aa <__retarget_lock_release_recursive>:
 80060aa:	4770      	bx	lr

080060ac <_init>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr

080060b8 <_fini>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	bf00      	nop
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr
